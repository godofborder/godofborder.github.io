{"title":"PYTHON第4章扩展习题","uid":"3dac8a3b916e2b92a60024738a9872dc","slug":"python-cp4-ex","date":"2022-03-14T15:48:02.000Z","updated":"2022-03-15T08:26:19.749Z","comments":true,"path":"api/articles/python-cp4-ex.json","keywords":null,"cover":"https://s1.ax1x.com/2022/03/14/bjepjg.jpg","content":"<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">注意</p>\n<p>此页面尚未完工！</p>\n</div>\n<h1 id=\"4-列表-EX\"><a href=\"#4-列表-EX\" class=\"headerlink\" title=\"4 列表(EX)\"></a>4 列表(EX)</h1><h2 id=\"4-A-程序片段练习\"><a href=\"#4-A-程序片段练习\" class=\"headerlink\" title=\"4.A 程序片段练习\"></a>4.A 程序片段练习</h2><h3 id=\"4-A-1-嵌套列表元素求和\"><a href=\"#4-A-1-嵌套列表元素求和\" class=\"headerlink\" title=\"4.A.1 嵌套列表元素求和\"></a>4.A.1 嵌套列表元素求和</h3><p>【问题描述】</p>\n<p>输入一个嵌套列表，嵌套层次不限，求列表元素的和。这个列表的每个元素是整数。</p>\n<p>【输入形式】</p>\n<p>嵌套列表<br>【输出形式】</p>\n<p>整数<br>【样例输入】</p>\n<p>[1,2,3,[4,5,6,7],8]</p>\n<p>【样例输出】</p>\n<p>36<br>【代码实现】</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">sum&#x3D;0\ndef sumlist(lst):\n    global sum\n    for x in lst:\n        if type(x)is int:\n            sum+&#x3D;x\n        else:\n            sumlist(x)\n    return sum\nnums  &#x3D;  eval(input())\nsumv  &#x3D;  sumlist(nums)\nprint(sumv)</code></pre>\n<h3 id=\"4-A-2-嵌套列表元素加权求和\"><a href=\"#4-A-2-嵌套列表元素加权求和\" class=\"headerlink\" title=\"4.A.2 嵌套列表元素加权求和\"></a>4.A.2 嵌套列表元素加权求和</h3><p>【问题描述】</p>\n<p>输入一个嵌套列表，嵌套层次不超过5层，根据层次，求列表元素的加权和，权是指元素在嵌套列表中的层次。第一层每个元素的权值为：元素值<em>1，第二层每个元素的权值为：元素值</em>2，第三层每个元素的权值为：元素值*3， …,依此类推！</p>\n<p>【输入形式】</p>\n<p>按照列表的形式输入，每个元素是一个整数<br>【输出形式】</p>\n<p>整数<br>【样例输入】</p>\n<p>[1,2,[3,4,[5,6],7],8]</p>\n<p>【样例输出】</p>\n<p>72<br>【代码实现】</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def sumlist(lst,b):\n    global sum\n    for x in lst:\n        if type(x)is int:\n            sum+&#x3D;x*b\n        else:\n            b+&#x3D;1\n            sumlist(x,b)\n            b-&#x3D;1\n    return sum\n\nsum&#x3D;0\nnums  &#x3D;  eval(input())\naddv  &#x3D;  sumlist(nums,  1)\nprint(addv)</code></pre>\n<h3 id=\"4-A-3-找出列表中缺失的数字\"><a href=\"#4-A-3-找出列表中缺失的数字\" class=\"headerlink\" title=\"4.A.3 找出列表中缺失的数字\"></a>4.A.3 找出列表中缺失的数字</h3><p>【问题描述】</p>\n<p> 读入一个长度为n-1的整数列表，这个列表的所有元素都是按照递增顺序排列，且每个数字都是唯一的，每个数字都在范围0<del>n-1之内。0</del>n-1范围内的n个数字中有且只有一个数字不在该列表中。请找出这个数字。<br>【输入形式】</p>\n<p>输入一个包含n-1个数字的列表，元素不重复且按升序排列，包括方括号，列表元素逗号分隔。<br>【输出形式】</p>\n<p>输出找到的数字<br>【样例输入1】</p>\n<p>[0,1,3]<br>【样例输出1】</p>\n<p>2</p>\n<p>【样例输入2】</p>\n<p>[0,1,2,3,4,5]<br>【样例输出2】</p>\n<p>6</p>\n<p>【样例说明】</p>\n<p>第1个样例输入的列表长度为3，也就是完整的列表应该是4个元素。0~3之间的每个数字只能出现一次，且必须出现一次。经查找缺了数字2。</p>\n<p>第2个样例输入的列表长度为6，也就是完整的列表应该是7个元素。0~6之间的每个数字只能出现一次，且必须出现一次。经查找缺了数字6。<br>【代码实现】</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def missNumber(lst):\n    fulllst&#x3D;[x for x in range(0,len(lst)+1)]\n    for x in fulllst:\n        if not x in lst:\n            return x\nnums  &#x3D;  eval(input())\nnumber  &#x3D;  missNumber(nums)\nprint(number)</code></pre>\n<h3 id=\"4-A-4-找出两个列表的相同元素（不使用集合），且去除重复元素\"><a href=\"#4-A-4-找出两个列表的相同元素（不使用集合），且去除重复元素\" class=\"headerlink\" title=\"4.A.4 找出两个列表的相同元素（不使用集合），且去除重复元素\"></a>4.A.4 找出两个列表的相同元素（不使用集合），且去除重复元素</h3><p>【问题描述】</p>\n<p>已知两个列表，可能包含有相同元素，请找出两个列表的相同元素，并放入新的列表。打印新列表。输出结果中没有重复元素,如果两个列表中没有相同元素则输出[]。</p>\n<p>【输入形式】</p>\n<p>第一行输入第一个列表，包括方括号，元素之间用逗号分隔</p>\n<p>第二行输入第二个列表。<br>【输出形式】</p>\n<p>如果存在相同元素，非降序输出列表元素</p>\n<p>如果不存在相同元素则输出[]</p>\n<p>【样例输入1】</p>\n<p>[1,2,3,4,5]</p>\n<p>[2,3,4,5,6]<br>【样例输出1】</p>\n<p>[2, 3, 4, 5]</p>\n<p>【样例输入2】</p>\n<p>[1,2,3,4,5]</p>\n<p>[7,8,9,10,11]<br>【样例输出1】</p>\n<p>[]<br>【代码实现】</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">nums1  &#x3D;  eval(input())    #  输入列表\nnums2  &#x3D;  eval(input())\nnums1.sort()    #  排序\nnums2.sort()\narr  &#x3D;  []\ni  &#x3D;  j  &#x3D;  0\nwhile  i  &lt;  len(nums1)  and  j  &lt;  len(nums2):    #  相互比较开始\n        if  nums1[i]  &lt;  nums2[j]:\n                i  +&#x3D;  1\n        elif  nums1[i]  &gt;  nums2[j]:\n                j+&#x3D;1\n        else:\n            arr.append(nums1[i])\n            i  +&#x3D;  1\n            j  +&#x3D;  1\nfor  x  in  arr:\n        while  arr.count(x)  &gt;  1:\n            arr.remove(x)\nprint(arr)</code></pre>\n\n<hr>\n<h2 id=\"4-B-编程练习\"><a href=\"#4-B-编程练习\" class=\"headerlink\" title=\"4.B 编程练习\"></a>4.B 编程练习</h2><!--\n## 4.B.1 计算嵌套列表某一层次的元素数量\n【问题描述】\n\n输入一个嵌套列表，再输入层数，求该层的元素个数。如果求第二层次的元素个数，但是第二层次还有第三层次嵌套，则嵌套列表算一个元素。\n\n【输入形式】\n\n第一行输入嵌套列表，包含方括号，逗号分隔，每个元素是整数\n\n第二行输入需要计算的层次，整数，大于0\n【输出形式】\n\n整数，计算所得的个数\n【样例输入】\n\n[1,2,[3,4,[5,6],7],8]\n\n2\n\n【样例输出】\n\n4\n\n【代码实现】\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def countv(lst,a):\n    global floor,out\n    for x in lst:\n        if type(x)is int:\n            out[floor]+&#x3D;1\n        else:\n            out[floor]+&#x3D;1\n            floor+&#x3D;1\n            countv(x,floor)\n            floor-&#x3D;1\n    return out\nlst&#x3D;eval(input())\naspect&#x3D;eval(input())\nout&#x3D;[0 for x in range(0,len(lst))]\nfloor&#x3D;0\nprint(countv(lst,aspect)[aspect-1])</code></pre>\n\n<h2 id=\"4-B-2-计算嵌套列表中某一层列表的数字元素个数\"><a href=\"#4-B-2-计算嵌套列表中某一层列表的数字元素个数\" class=\"headerlink\" title=\"4.B.2 计算嵌套列表中某一层列表的数字元素个数\"></a>4.B.2 计算嵌套列表中某一层列表的数字元素个数</h2><p>【问题描述】</p>\n<p>输入一个嵌套列表nums，再输入一个层数n，求该层的数字元素个数。<br>【输入形式】</p>\n<p>第一行输入列表，元素是自然数，包括方括号，逗号分隔<br>【输出形式】</p>\n<p>整数<br>【样例输入】</p>\n<p>[1,2,[3,4,[5,6],7],8]</p>\n<p>3</p>\n<p>【样例输出】</p>\n<p>2</p>\n<p>【代码实现】</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>此题在上题基础上仅需要当遍历的元素不是int类型时计数不再+1即可，故我们可以直接将else里的计数+1注释掉</p></blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def countv(lst,a):\n    global floor,out\n    for x in lst:\n        if type(x)is int:\n            out[floor]+&#x3D;1\n        else:\n            #out[floor]+&#x3D;1\n            floor+&#x3D;1\n            countv(x,floor)\n            floor-&#x3D;1\n    return out\nlst&#x3D;eval(input())\naspect&#x3D;eval(input())\nout&#x3D;[0 for x in range(0,len(lst))]\nfloor&#x3D;0\nprint(countv(lst,aspect)[aspect-1])</code></pre>\n\n<h2 id=\"4-B-3-返回任意两个元素的差小于等于limit的最长连续子列表\"><a href=\"#4-B-3-返回任意两个元素的差小于等于limit的最长连续子列表\" class=\"headerlink\" title=\"4.B.3 返回任意两个元素的差小于等于limit的最长连续子列表\"></a>4.B.3 返回任意两个元素的差小于等于limit的最长连续子列表</h2><p>【问题描述】</p>\n<p>读入一个自然数列表nums，和一个自然数limit。请返回最长连续子列表的长度。该子列表中任两个元素之间的差的绝对值小于或等于limit。<br>【输入形式】</p>\n<p>第一行输入列表，包括方括号，逗号分隔</p>\n<p>第二行输入limit的值。<br>【输出形式】</p>\n<p>整数<br>【样例输入】</p>\n<p>[8,2,4,7]</p>\n<p>4</p>\n<p>【样例输出】</p>\n<p>2</p>\n<h2 id=\"4-B-4\"><a href=\"#4-B-4\" class=\"headerlink\" title=\"4.B.4\"></a>4.B.4</h2><h2 id=\"4-B-5\"><a href=\"#4-B-5\" class=\"headerlink\" title=\"4.B.5\"></a>4.B.5</h2><p>–&gt;</p>\n","text":" 注意 此页面尚未完工！ 4 列表(EX)4.A 程序片段练习4.A.1 嵌套列表元素求和【问题描述】 输入一个嵌套列表，嵌套层次不限，求列表元素的和。这个列表的每个元素是整数。 【输入形式】 嵌套列表【输出形式】 整数【样例输入】 [1,2,3,[4,5,6,7],8] 【样例...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"Learning","slug":"Learning","count":2,"path":"api/categories/Learning.json"},{"name":"Coding","slug":"Learning/Coding","count":2,"path":"api/categories/Learning/Coding.json"},{"name":"Python","slug":"Learning/Coding/Python","count":2,"path":"api/categories/Learning/Coding/Python.json"}],"tags":[{"name":"life","slug":"life","count":2,"path":"api/tags/life.json"},{"name":"weekly","slug":"weekly","count":2,"path":"api/tags/weekly.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-%E5%88%97%E8%A1%A8-EX\"><span class=\"toc-text\">4 列表(EX)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-A-%E7%A8%8B%E5%BA%8F%E7%89%87%E6%AE%B5%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">4.A 程序片段练习</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-A-1-%E5%B5%8C%E5%A5%97%E5%88%97%E8%A1%A8%E5%85%83%E7%B4%A0%E6%B1%82%E5%92%8C\"><span class=\"toc-text\">4.A.1 嵌套列表元素求和</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-A-2-%E5%B5%8C%E5%A5%97%E5%88%97%E8%A1%A8%E5%85%83%E7%B4%A0%E5%8A%A0%E6%9D%83%E6%B1%82%E5%92%8C\"><span class=\"toc-text\">4.A.2 嵌套列表元素加权求和</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-A-3-%E6%89%BE%E5%87%BA%E5%88%97%E8%A1%A8%E4%B8%AD%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97\"><span class=\"toc-text\">4.A.3 找出列表中缺失的数字</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-A-4-%E6%89%BE%E5%87%BA%E4%B8%A4%E4%B8%AA%E5%88%97%E8%A1%A8%E7%9A%84%E7%9B%B8%E5%90%8C%E5%85%83%E7%B4%A0%EF%BC%88%E4%B8%8D%E4%BD%BF%E7%94%A8%E9%9B%86%E5%90%88%EF%BC%89%EF%BC%8C%E4%B8%94%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">4.A.4 找出两个列表的相同元素（不使用集合），且去除重复元素</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-B-%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">4.B 编程练习</span></a></li></ol></li></ol>","author":{"name":"Krodnel","slug":"blog-author","avatar":"https://s1.ax1x.com/2022/03/06/brFqER.png","link":"/","description":"I don't live in a dream <br /> The dream is my reality","socials":{"github":"https://github.com/godofborder","twitter":"https://twitter.com/godofborder","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/34360575"},"QQ":{"icon":"/svg/QQ.svg","link":"http://wpa.qq.com/msgrd?v=3&uin=2632954297&site=qq&menu=yes"},"netease":{"icon":"/svg/netease.svg","link":"http://music.163.com/playlist?id=688977586&userid=337229589"},"steam":{"icon":"/svg/steam.svg","link":"https://steamcommunity.com/id/Krodnel/"}}}},"mapped":true,"prev_post":{"title":"2020-December","uid":"a0fc5943b7a790623fb58b6f27504305","slug":"2020-December","date":"2020-12-20T15:25:26.000Z","updated":"2022-03-09T13:29:54.262Z","comments":true,"path":"api/articles/2020-December.json","keywords":null,"cover":"https://s1.ax1x.com/2022/03/06/brs6s0.jpg","text":"12.21 数学难题 立体几何 实在不会 一看就会 一做就没 啊 我是多么的废 12.22 关于理想 想做的事还有很多 但限制我的却是金钱 以及时间 追求高层次的精神与现实贫乏的物质 这样的矛盾何时才能消失不见？ 12.29 怀旧有感 怀念从前 属于我的 旧时光 怀念 故事故物 ...","link":"","photos":[],"count_time":{"symbolsCount":260,"symbolsTime":"1 mins."},"categories":[{"name":"Thoughts","slug":"Thoughts","count":7,"path":"api/categories/Thoughts.json"}],"tags":[{"name":"Life","slug":"Life","count":7,"path":"api/tags/Life.json"},{"name":"Monthly","slug":"Monthly","count":7,"path":"api/tags/Monthly.json"}],"author":{"name":"Krodnel","slug":"blog-author","avatar":"https://s1.ax1x.com/2022/03/06/brFqER.png","link":"/","description":"I don't live in a dream <br /> The dream is my reality","socials":{"github":"https://github.com/godofborder","twitter":"https://twitter.com/godofborder","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/34360575"},"QQ":{"icon":"/svg/QQ.svg","link":"http://wpa.qq.com/msgrd?v=3&uin=2632954297&site=qq&menu=yes"},"netease":{"icon":"/svg/netease.svg","link":"http://music.163.com/playlist?id=688977586&userid=337229589"},"steam":{"icon":"/svg/steam.svg","link":"https://steamcommunity.com/id/Krodnel/"}}}},"feature":true},"next_post":{"title":"2022-March","uid":"331968bd518d7ee93cc059cb0862a51c","slug":"2022-3月序","date":"2022-03-01T14:58:23.000Z","updated":"2022-03-15T05:46:06.902Z","comments":true,"path":"api/articles/2022-3月序.json","keywords":null,"cover":"https://s1.ax1x.com/2022/03/06/brazDg.png","text":"三月已至3.6 不知不觉间就已经三月了，天气转暖，太阳出现的次数也越来越多了，阳光明媚，正是向上生长的季节！ 3.14 带着二月的未完成， 在三月奔跑起来， 即使道路泥泞， 也会收获遍野的烂漫。 3.15-我忘不掉夏小姐了。-如果不是知道了夏小姐，说不定我已经对这个世界没有留恋了...","link":"","photos":[],"count_time":{"symbolsCount":446,"symbolsTime":"1 mins."},"categories":[{"name":"Thoughts","slug":"Thoughts","count":7,"path":"api/categories/Thoughts.json"}],"tags":[{"name":"Life","slug":"Life","count":7,"path":"api/tags/Life.json"},{"name":"Monthly","slug":"Monthly","count":7,"path":"api/tags/Monthly.json"}],"author":{"name":"Krodnel","slug":"blog-author","avatar":"https://s1.ax1x.com/2022/03/06/brFqER.png","link":"/","description":"I don't live in a dream <br /> The dream is my reality","socials":{"github":"https://github.com/godofborder","twitter":"https://twitter.com/godofborder","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/34360575"},"QQ":{"icon":"/svg/QQ.svg","link":"http://wpa.qq.com/msgrd?v=3&uin=2632954297&site=qq&menu=yes"},"netease":{"icon":"/svg/netease.svg","link":"http://music.163.com/playlist?id=688977586&userid=337229589"},"steam":{"icon":"/svg/steam.svg","link":"https://steamcommunity.com/id/Krodnel/"}}}}}}