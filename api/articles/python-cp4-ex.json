{"title":"PYTHON第4章扩展习题","uid":"3dac8a3b916e2b92a60024738a9872dc","slug":"python-cp4-ex","date":"2022-03-14T15:48:02.000Z","updated":"2022-04-02T14:29:36.225Z","comments":true,"path":"api/articles/python-cp4-ex.json","keywords":null,"cover":"https://s1.ax1x.com/2022/03/14/bjepjg.jpg","content":"<h1 id=\"Chapter4-列表-EX\"><a href=\"#Chapter4-列表-EX\" class=\"headerlink\" title=\"Chapter4. 列表(EX)\"></a>Chapter4. 列表(EX)</h1><h2 id=\"4-A-程序片段练习\"><a href=\"#4-A-程序片段练习\" class=\"headerlink\" title=\"4.A 程序片段练习\"></a>4.A 程序片段练习</h2><h3 id=\"4-A-1-嵌套列表元素求和\"><a href=\"#4-A-1-嵌套列表元素求和\" class=\"headerlink\" title=\"4.A.1 嵌套列表元素求和\"></a>4.A.1 嵌套列表元素求和</h3><p>【问题描述】</p>\n<p>输入一个嵌套列表，嵌套层次不限，求列表元素的和。这个列表的每个元素是整数。</p>\n<p>【输入形式】</p>\n<p>嵌套列表<br>【输出形式】</p>\n<p>整数<br>【样例输入】</p>\n<p>[1,2,3,[4,5,6,7],8]</p>\n<p>【样例输出】</p>\n<p>36<br>【代码实现】</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">sum&#x3D;0\ndef sumlist(lst):\n    global sum\n    for x in lst:\n        if type(x)is int:\n            sum+&#x3D;x\n        else:\n            sumlist(x)\n    return sum\nnums  &#x3D;  eval(input())\nsumv  &#x3D;  sumlist(nums)\nprint(sumv)</code></pre>\n<h3 id=\"4-A-2-嵌套列表元素加权求和\"><a href=\"#4-A-2-嵌套列表元素加权求和\" class=\"headerlink\" title=\"4.A.2 嵌套列表元素加权求和\"></a>4.A.2 嵌套列表元素加权求和</h3><p>【问题描述】</p>\n<p>输入一个嵌套列表，嵌套层次不超过5层，根据层次，求列表元素的加权和，权是指元素在嵌套列表中的层次。第一层每个元素的权值为：元素值<em>1，第二层每个元素的权值为：元素值</em>2，第三层每个元素的权值为：元素值*3， …,依此类推！</p>\n<p>【输入形式】</p>\n<p>按照列表的形式输入，每个元素是一个整数<br>【输出形式】</p>\n<p>整数<br>【样例输入】</p>\n<p>[1,2,[3,4,[5,6],7],8]</p>\n<p>【样例输出】</p>\n<p>72<br>【代码实现】</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def sumlist(lst,b):\n    global sum\n    for x in lst:\n        if type(x)is int:\n            sum+&#x3D;x*b\n        else:\n            b+&#x3D;1\n            sumlist(x,b)\n            b-&#x3D;1\n    return sum\n\nsum&#x3D;0\nnums  &#x3D;  eval(input())\naddv  &#x3D;  sumlist(nums,  1)\nprint(addv)</code></pre>\n<h3 id=\"4-A-3-找出列表中缺失的数字\"><a href=\"#4-A-3-找出列表中缺失的数字\" class=\"headerlink\" title=\"4.A.3 找出列表中缺失的数字\"></a>4.A.3 找出列表中缺失的数字</h3><p>【问题描述】</p>\n<p> 读入一个长度为n-1的整数列表，这个列表的所有元素都是按照递增顺序排列，且每个数字都是唯一的，每个数字都在范围0<del>n-1之内。0</del>n-1范围内的n个数字中有且只有一个数字不在该列表中。请找出这个数字。<br>【输入形式】</p>\n<p>输入一个包含n-1个数字的列表，元素不重复且按升序排列，包括方括号，列表元素逗号分隔。<br>【输出形式】</p>\n<p>输出找到的数字<br>【样例输入1】</p>\n<p>[0,1,3]<br>【样例输出1】</p>\n<p>2</p>\n<p>【样例输入2】</p>\n<p>[0,1,2,3,4,5]<br>【样例输出2】</p>\n<p>6</p>\n<p>【样例说明】</p>\n<p>第1个样例输入的列表长度为3，也就是完整的列表应该是4个元素。0~3之间的每个数字只能出现一次，且必须出现一次。经查找缺了数字2。</p>\n<p>第2个样例输入的列表长度为6，也就是完整的列表应该是7个元素。0~6之间的每个数字只能出现一次，且必须出现一次。经查找缺了数字6。<br>【代码实现】</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def missNumber(lst):\n    fulllst&#x3D;[x for x in range(0,len(lst)+1)]\n    for x in fulllst:\n        if not x in lst:\n            return x\nnums  &#x3D;  eval(input())\nnumber  &#x3D;  missNumber(nums)\nprint(number)</code></pre>\n<h3 id=\"4-A-4-找出两个列表的相同元素（不使用集合），且去除重复元素\"><a href=\"#4-A-4-找出两个列表的相同元素（不使用集合），且去除重复元素\" class=\"headerlink\" title=\"4.A.4 找出两个列表的相同元素（不使用集合），且去除重复元素\"></a>4.A.4 找出两个列表的相同元素（不使用集合），且去除重复元素</h3><p>【问题描述】</p>\n<p>已知两个列表，可能包含有相同元素，请找出两个列表的相同元素，并放入新的列表。打印新列表。输出结果中没有重复元素,如果两个列表中没有相同元素则输出[]。</p>\n<p>【输入形式】</p>\n<p>第一行输入第一个列表，包括方括号，元素之间用逗号分隔</p>\n<p>第二行输入第二个列表。<br>【输出形式】</p>\n<p>如果存在相同元素，非降序输出列表元素</p>\n<p>如果不存在相同元素则输出[]</p>\n<p>【样例输入1】</p>\n<p>[1,2,3,4,5]</p>\n<p>[2,3,4,5,6]<br>【样例输出1】</p>\n<p>[2, 3, 4, 5]</p>\n<p>【样例输入2】</p>\n<p>[1,2,3,4,5]</p>\n<p>[7,8,9,10,11]<br>【样例输出1】</p>\n<p>[]<br>【代码实现】</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">nums1  &#x3D;  eval(input())    #  输入列表\nnums2  &#x3D;  eval(input())\nnums1.sort()    #  排序\nnums2.sort()\narr  &#x3D;  []\ni  &#x3D;  j  &#x3D;  0\nwhile  i  &lt;  len(nums1)  and  j  &lt;  len(nums2):    #  相互比较开始\n        if  nums1[i]  &lt;  nums2[j]:\n                i  +&#x3D;  1\n        elif  nums1[i]  &gt;  nums2[j]:\n                j+&#x3D;1\n        else:\n            arr.append(nums1[i])\n            i  +&#x3D;  1\n            j  +&#x3D;  1\nfor  x  in  arr:\n        while  arr.count(x)  &gt;  1:\n            arr.remove(x)\nprint(arr)</code></pre>\n\n<hr>\n<h2 id=\"4-B-编程练习\"><a href=\"#4-B-编程练习\" class=\"headerlink\" title=\"4.B 编程练习\"></a>4.B 编程练习</h2><h3 id=\"4-B-1-计算嵌套列表某一层次的元素数量\"><a href=\"#4-B-1-计算嵌套列表某一层次的元素数量\" class=\"headerlink\" title=\"4.B.1 计算嵌套列表某一层次的元素数量\"></a>4.B.1 计算嵌套列表某一层次的元素数量</h3><p>【问题描述】</p>\n<p>输入一个嵌套列表，再输入层数，求该层的元素个数。如果求第二层次的元素个数，但是第二层次还有第三层次嵌套，则嵌套列表算一个元素。</p>\n<p>【输入形式】</p>\n<p>第一行输入嵌套列表，包含方括号，逗号分隔，每个元素是整数</p>\n<p>第二行输入需要计算的层次，整数，大于0<br>【输出形式】</p>\n<p>整数，计算所得的个数<br>【样例输入】</p>\n<p>[1,2,[3,4,[5,6],7],8]</p>\n<p>2</p>\n<p>【样例输出】</p>\n<p>4</p>\n<p>【代码实现】</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def countv(lst,a):\n    global floor,out\n    for x in lst:\n        if type(x)is int:\n            out[floor]+&#x3D;1\n        else:\n            out[floor]+&#x3D;1\n            floor+&#x3D;1\n            countv(x,floor)\n            floor-&#x3D;1\n    return out\nlst&#x3D;eval(input())\naspect&#x3D;eval(input())\nout&#x3D;[0 for x in range(0,len(lst))]\nfloor&#x3D;0\nprint(countv(lst,aspect)[aspect-1])</code></pre>\n\n<h3 id=\"4-B-2-计算嵌套列表中某一层列表的数字元素个数\"><a href=\"#4-B-2-计算嵌套列表中某一层列表的数字元素个数\" class=\"headerlink\" title=\"4.B.2 计算嵌套列表中某一层列表的数字元素个数\"></a>4.B.2 计算嵌套列表中某一层列表的数字元素个数</h3><p>【问题描述】</p>\n<p>输入一个嵌套列表nums，再输入一个层数n，求该层的数字元素个数。<br>【输入形式】</p>\n<p>第一行输入列表，元素是自然数，包括方括号，逗号分隔<br>【输出形式】</p>\n<p>整数<br>【样例输入】</p>\n<p>[1,2,[3,4,[5,6],7],8]</p>\n<p>3</p>\n<p>【样例输出】</p>\n<p>2</p>\n<p>【代码实现】</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>此题在上题基础上仅需要当遍历的元素不是int类型时计数不再+1即可，故我们可以直接将else里的计数+1注释掉</p></blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def countv(lst,a):\n    global floor,out\n    for x in lst:\n        if type(x)is int:\n            out[floor]+&#x3D;1\n        else:\n            #out[floor]+&#x3D;1\n            floor+&#x3D;1\n            countv(x,floor)\n            floor-&#x3D;1\n    return out\nlst&#x3D;eval(input())\naspect&#x3D;eval(input())\nout&#x3D;[0 for x in range(0,len(lst))]\nfloor&#x3D;0\nprint(countv(lst,aspect)[aspect-1])</code></pre>\n\n<h3 id=\"4-B-3-返回任意两个元素的差小于等于limit的最长连续子列表\"><a href=\"#4-B-3-返回任意两个元素的差小于等于limit的最长连续子列表\" class=\"headerlink\" title=\"4.B.3 返回任意两个元素的差小于等于limit的最长连续子列表\"></a>4.B.3 返回任意两个元素的差小于等于limit的最长连续子列表</h3><div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>本题代码虽能通过，但并不是最优解，没来得及进行进一步的优化<br>例如：在列表<code>out</code>中，每一个满足条件的连续子列表长度都被<code>append</code>了进来，最优解应当最计算每个<code>x</code>对应的最长解</p>\n</div>\n<p>【问题描述】</p>\n<p>读入一个自然数列表nums，和一个自然数limit。请返回最长连续子列表的长度。该子列表中任两个元素之间的差的绝对值小于或等于limit。<br>【输入形式】</p>\n<p>第一行输入列表，包括方括号，逗号分隔</p>\n<p>第二行输入limit的值。<br>【输出形式】</p>\n<p>整数<br>【样例输入】</p>\n<p>[8,2,4,7]</p>\n<p>4</p>\n<p>【样例输出】</p>\n<p>2<br>【代码实现】</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def shortest(lst,limit):\n    global out\n    for x in range(0,len(lst)-1):\n        for i in range(x+1,len(lst)+1):\n            j&#x3D; lst[x:i+1]\n            if abs(max(j)-min(j))&lt;&#x3D;limit:\n                out.append(len(j))\n            else:\n                break\n    return max(out)\nlst&#x3D;eval(input())\nlimit&#x3D;eval(input())\nout&#x3D;[]\nprint(shortest(lst,limit))</code></pre>\n<h3 id=\"4-B-4-在列表中找出有相同度的最小连续子列表，输出其长度\"><a href=\"#4-B-4-在列表中找出有相同度的最小连续子列表，输出其长度\" class=\"headerlink\" title=\"4.B.4 在列表中找出有相同度的最小连续子列表，输出其长度\"></a>4.B.4 在列表中找出有相同度的最小连续子列表，输出其长度</h3><div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>本题也并非最优解，out列表冗长，日后或许会优化</p>\n</div>\n<p>【问题描述】</p>\n<p>给定一个只包含自然数的列表nums。列表的度指的是任一元素出现频率的最大值。找出与nums 拥有相同大小的度的最短连续子列表。输出这个子列表的长度。</p>\n<p>【输入形式】</p>\n<p>一个列表，包括方括号，逗号分隔<br>【输出形式】</p>\n<p>整数<br>【样例输入】</p>\n<p>[1, 2, 2, 3, 1]</p>\n<p>【样例输出】</p>\n<p>2<br>【代码实现】</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def shortest(lst,degree):\n    global out\n    if len(lst)&#x3D;&#x3D;1:\n        return 1\n    else:\n        for x in range(0,len(lst)-1):\n            for i in range(x,len(lst)+1):\n                j&#x3D; lst[x:i+1]\n                for k in j:\n                    if j.count(k)&#x3D;&#x3D;degree:\n                        out.append(len(j))\n                        break\n        return min(out)\nlst&#x3D;eval(input())\npinlv&#x3D;[]\nfor x in lst:\n    pinlv.append(lst.count(x))\ndegree&#x3D;max(pinlv)\nout&#x3D;[]\nprint(shortest(lst,degree))</code></pre>\n\n<h3 id=\"4-B-5-把由负整数构成的列表中的每个数转换成二进制补码形式\"><a href=\"#4-B-5-把由负整数构成的列表中的每个数转换成二进制补码形式\" class=\"headerlink\" title=\"4.B.5 把由负整数构成的列表中的每个数转换成二进制补码形式\"></a>4.B.5 把由负整数构成的列表中的每个数转换成二进制补码形式</h3><p>【问题描述】</p>\n<p>已知一个列表，这个列表中的每个元素都是负整数，依次把这个列表中的每个数转成用32位二进制表示的补码形式，放入另外一个列表进行输出。<br>【输入形式】</p>\n<p>用列表的形式进行输入，包括方括号，每个元素用逗号分隔<br>【输出形式】</p>\n<p>直接用print输出列表<br>【样例输入】</p>\n<p>[-1,-2,-3]</p>\n<p>【样例输出】</p>\n<p>[‘0b11111111111111111111111111111111’, ‘0b11111111111111111111111111111110’, ‘0b11111111111111111111111111111101’]<br>【代码实现】</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def fuerjinzhi(lst):\n    for x in lst:\n        out.append(bin(2**24+x))\n    for i in range(0,len(out)):\n        out_list&#x3D;list(out[i])\n        out_list.insert(2,&quot;11111111&quot;)\n        out[i]&#x3D;&quot;&quot;.join(out_list)\n    return out\nlst&#x3D;eval(input())\nout&#x3D;[]\nprint(fuerjinzhi(lst))</code></pre>","feature":true,"text":"Chapter4. 列表(EX)4.A 程序片段练习4.A.1 嵌套列表元素求和【问题描述】 输入一个嵌套列表，嵌套层次不限，求列表元素的和。这个列表的每个元素是整数。 【输入形式】 嵌套列表【输出形式】 整数【样例输入】 [1,2,3,[4,5,6,7],8] 【样例输出】 3...","link":"","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[{"name":"Learning","slug":"Learning","count":3,"path":"api/categories/Learning.json"},{"name":"Coding","slug":"Learning/Coding","count":3,"path":"api/categories/Learning/Coding.json"},{"name":"Python","slug":"Learning/Coding/Python","count":3,"path":"api/categories/Learning/Coding/Python.json"}],"tags":[{"name":"life","slug":"life","count":3,"path":"api/tags/life.json"},{"name":"weekly","slug":"weekly","count":3,"path":"api/tags/weekly.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Chapter4-%E5%88%97%E8%A1%A8-EX\"><span class=\"toc-text\">Chapter4. 列表(EX)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-A-%E7%A8%8B%E5%BA%8F%E7%89%87%E6%AE%B5%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">4.A 程序片段练习</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-A-1-%E5%B5%8C%E5%A5%97%E5%88%97%E8%A1%A8%E5%85%83%E7%B4%A0%E6%B1%82%E5%92%8C\"><span class=\"toc-text\">4.A.1 嵌套列表元素求和</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-A-2-%E5%B5%8C%E5%A5%97%E5%88%97%E8%A1%A8%E5%85%83%E7%B4%A0%E5%8A%A0%E6%9D%83%E6%B1%82%E5%92%8C\"><span class=\"toc-text\">4.A.2 嵌套列表元素加权求和</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-A-3-%E6%89%BE%E5%87%BA%E5%88%97%E8%A1%A8%E4%B8%AD%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97\"><span class=\"toc-text\">4.A.3 找出列表中缺失的数字</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-A-4-%E6%89%BE%E5%87%BA%E4%B8%A4%E4%B8%AA%E5%88%97%E8%A1%A8%E7%9A%84%E7%9B%B8%E5%90%8C%E5%85%83%E7%B4%A0%EF%BC%88%E4%B8%8D%E4%BD%BF%E7%94%A8%E9%9B%86%E5%90%88%EF%BC%89%EF%BC%8C%E4%B8%94%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">4.A.4 找出两个列表的相同元素（不使用集合），且去除重复元素</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-B-%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">4.B 编程练习</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-B-1-%E8%AE%A1%E7%AE%97%E5%B5%8C%E5%A5%97%E5%88%97%E8%A1%A8%E6%9F%90%E4%B8%80%E5%B1%82%E6%AC%A1%E7%9A%84%E5%85%83%E7%B4%A0%E6%95%B0%E9%87%8F\"><span class=\"toc-text\">4.B.1 计算嵌套列表某一层次的元素数量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-B-2-%E8%AE%A1%E7%AE%97%E5%B5%8C%E5%A5%97%E5%88%97%E8%A1%A8%E4%B8%AD%E6%9F%90%E4%B8%80%E5%B1%82%E5%88%97%E8%A1%A8%E7%9A%84%E6%95%B0%E5%AD%97%E5%85%83%E7%B4%A0%E4%B8%AA%E6%95%B0\"><span class=\"toc-text\">4.B.2 计算嵌套列表中某一层列表的数字元素个数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-B-3-%E8%BF%94%E5%9B%9E%E4%BB%BB%E6%84%8F%E4%B8%A4%E4%B8%AA%E5%85%83%E7%B4%A0%E7%9A%84%E5%B7%AE%E5%B0%8F%E4%BA%8E%E7%AD%89%E4%BA%8Elimit%E7%9A%84%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%AD%90%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">4.B.3 返回任意两个元素的差小于等于limit的最长连续子列表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-B-4-%E5%9C%A8%E5%88%97%E8%A1%A8%E4%B8%AD%E6%89%BE%E5%87%BA%E6%9C%89%E7%9B%B8%E5%90%8C%E5%BA%A6%E7%9A%84%E6%9C%80%E5%B0%8F%E8%BF%9E%E7%BB%AD%E5%AD%90%E5%88%97%E8%A1%A8%EF%BC%8C%E8%BE%93%E5%87%BA%E5%85%B6%E9%95%BF%E5%BA%A6\"><span class=\"toc-text\">4.B.4 在列表中找出有相同度的最小连续子列表，输出其长度</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-B-5-%E6%8A%8A%E7%94%B1%E8%B4%9F%E6%95%B4%E6%95%B0%E6%9E%84%E6%88%90%E7%9A%84%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%AF%8F%E4%B8%AA%E6%95%B0%E8%BD%AC%E6%8D%A2%E6%88%90%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A5%E7%A0%81%E5%BD%A2%E5%BC%8F\"><span class=\"toc-text\">4.B.5 把由负整数构成的列表中的每个数转换成二进制补码形式</span></a></li></ol></li></ol></li></ol>","author":{"name":"Krodnel","slug":"blog-author","avatar":"https://s1.ax1x.com/2022/03/06/brFqER.png","link":"/","description":"I don't live in a dream <br /> The dream is my reality","socials":{"github":"https://github.com/godofborder","twitter":"https://twitter.com/godofborder","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/34360575"},"QQ":{"icon":"/svg/QQ.svg","link":"http://wpa.qq.com/msgrd?v=3&uin=2632954297&site=qq&menu=yes"},"netease":{"icon":"/svg/netease.svg","link":"http://music.163.com/playlist?id=688977586&userid=337229589"},"steam":{"icon":"/svg/steam.svg","link":"https://steamcommunity.com/id/Krodnel/"}}}},"mapped":true,"prev_post":{"title":"PYTHON第6章基础习题","uid":"7f9325ccf0a7deb8deedae86991cd4ba","slug":"python-cp6-std","date":"2022-04-02T14:30:17.000Z","updated":"2022-04-02T15:13:44.235Z","comments":true,"path":"api/articles/python-cp6-std.json","keywords":null,"cover":"https://s1.ax1x.com/2022/03/14/bjepjg.jpg","text":"Chapter6. 循环6.A 程序片段练习6.A.1 列表元素循环右移一位【问题描述】 以下列表里所有元素循环右移一位。请补充函数体。 【输入形式】 输入列表的元素，以逗号隔开【输出形式】 循环右移一位后的列表 【样例输入】 1,2,3,4,5【样例输出】 [‘5’, ‘1’,...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[{"name":"Learning","slug":"Learning","count":3,"path":"api/categories/Learning.json"},{"name":"Coding","slug":"Learning/Coding","count":3,"path":"api/categories/Learning/Coding.json"},{"name":"Python","slug":"Learning/Coding/Python","count":3,"path":"api/categories/Learning/Coding/Python.json"}],"tags":[{"name":"life","slug":"life","count":3,"path":"api/tags/life.json"},{"name":"weekly","slug":"weekly","count":3,"path":"api/tags/weekly.json"}],"author":{"name":"Krodnel","slug":"blog-author","avatar":"https://s1.ax1x.com/2022/03/06/brFqER.png","link":"/","description":"I don't live in a dream <br /> The dream is my reality","socials":{"github":"https://github.com/godofborder","twitter":"https://twitter.com/godofborder","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/34360575"},"QQ":{"icon":"/svg/QQ.svg","link":"http://wpa.qq.com/msgrd?v=3&uin=2632954297&site=qq&menu=yes"},"netease":{"icon":"/svg/netease.svg","link":"http://music.163.com/playlist?id=688977586&userid=337229589"},"steam":{"icon":"/svg/steam.svg","link":"https://steamcommunity.com/id/Krodnel/"}}}},"feature":true},"next_post":{"title":"PYTHON第4章基础习题","uid":"da3d3c8426ca2b127d2146bea8ac8e9f","slug":"python-cp4","date":"2022-03-12T03:48:27.000Z","updated":"2022-03-15T08:25:50.758Z","comments":true,"path":"api/articles/python-cp4.json","keywords":null,"cover":"https://s1.ax1x.com/2022/03/14/bjepjg.jpg","text":"Chapter4.列表4.1 删除列表中的最大元素和最小元素【问题描述】 读入一个整数列表，输出删除最大元素和最小元素后的列表。最大元素和最小元素可能有多个。【输入形式】 输入列表，包括方括号【输出形式】 直接用print输出列表【样例输入】 [1,2,3,4,5,6,1,7,7...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"Learning","slug":"Learning","count":3,"path":"api/categories/Learning.json"},{"name":"Coding","slug":"Learning/Coding","count":3,"path":"api/categories/Learning/Coding.json"},{"name":"Python","slug":"Learning/Coding/Python","count":3,"path":"api/categories/Learning/Coding/Python.json"}],"tags":[{"name":"life","slug":"life","count":3,"path":"api/tags/life.json"},{"name":"weekly","slug":"weekly","count":3,"path":"api/tags/weekly.json"}],"author":{"name":"Krodnel","slug":"blog-author","avatar":"https://s1.ax1x.com/2022/03/06/brFqER.png","link":"/","description":"I don't live in a dream <br /> The dream is my reality","socials":{"github":"https://github.com/godofborder","twitter":"https://twitter.com/godofborder","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/34360575"},"QQ":{"icon":"/svg/QQ.svg","link":"http://wpa.qq.com/msgrd?v=3&uin=2632954297&site=qq&menu=yes"},"netease":{"icon":"/svg/netease.svg","link":"http://music.163.com/playlist?id=688977586&userid=337229589"},"steam":{"icon":"/svg/steam.svg","link":"https://steamcommunity.com/id/Krodnel/"}}}},"feature":true}}