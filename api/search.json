[{"id":"2abbb626d7d11e908aa05da8d9928836","title":"喧嚣过后","content":"3.10 重归过了差不多一年啦，我又回来写博客了起因是室友转专业闲着没事，在捣鼓建博客网站，但是跟着知乎上的教程走吧，又有点毛病，始终整不出来，我表示我之前弄过一个博客网站，但是实在是不知道写些什么，我也不是现充，天天在网上分享自己的生活、po点照片啥的，再加上也遇到不少麻烦，比如SSL证书审核不通过啦、刷新变成下载啦、搜索引擎迟迟不收录啦这些，学业也繁忙，做博客貌似事情多收益还小，于是就慢慢荒废了。   \n\n\n\n\n\n\n\n\n\n但没想到，这些我曾经认为非常“棘手”的问题，在我重新开始摆弄博客时，被轻易解决掉了：SSL证书审核不过是因为解析记录里映射到自己github pages的网站上的DNS记录在审核时得暂停，后来部署SSL时又发现对github pages的ip服务器过时了，导致github验证DNS不通过，不过在更新了之后都悉数通过了，本博客也全程使用HTTPS访问啦（有小锁标志了，撒花！！！耶）、刷新变成下载是因为config里的网址template里最后没加一个反斜杠。不过最显得我没面子的问题——不收录，还是没被解决，我也不知道遇到了什么问题，sitemap这些都无济于事，手动提交更是理都不理。唉，只能等后续再来解决了qwq。  \n现在到了大二下，首先是疫情的影响过去了，起初在疫情里我就感觉到不少压抑的气氛，反反复复的疫情让我认为大学生活充满了阴霾，最后的那几个月更是情绪激烈。但随着放开措施的到来，往前的烟火气回到了身边，少了疫情的舒服，能很明显的感觉大家的积极性也调动了，最起码校园外的确是一片美好之景，这也使得我对未来的期望更加明朗。其次课程对我的时间的占据减少了，我又一直想学学这学学那的，写博客对我来说似乎是个好选择，进可记录学习过程，退可当做日记，多个表达情绪的方式。经过了这一年的喧嚣，其实我并不认为我真的学到了什么知识，只是在应用层面了解了许多技能罢了，兜兜转转又回到原点，但时间不等人，大二下这个节点对我来说有很大意义，做竞赛、参加导师的科研课题、准备语言考试、继续钻研主修课程。既然对现状不满，那就应当启航去追求所理想之事物！简单为三月做个题吧：\n\n阳春三月烟花如海，风月无边吟赞春秋\n\n那么下次见！  \n","slug":"2023-mar","date":"2023-03-10T14:59:07.000Z","categories_index":"Thoughts","tags_index":"Life,Monthly","author_index":"Krodnel"},{"id":"7128c5ade60c9916a830dffb27b42426","title":"从0开始搭建抓取CQU教务网的爬虫","content":"\n\n\n\n\n\n\n注意\n本文仍在更新中，内容尚缺！\n\n0. Prologue0.1 想法の诞生其实有这个想法很久了，最开始时在蓝盟的通知群里的学长大佬做的单子推送BOT和教务等信息BOT，但当时没有什么基础，高中学了几个月C++的早忘了，直到大一下才学了一学期Python，期间我也在同学群里部署过一些QQ机器人( nonebot,  hoshinobot等)，虽说现在也忘了许多了，但是还是决定捡起来，从图书馆找了本爬虫入门到入土的书，开整！\n0.2 大致框架\nPython脚本部分(爬取信息、定时爬取、bot定时查看数据更新并发送)\ncqhttp机器人对接qq协议\nnonebot机器人主体\nMySQL数据存储部分\n\n下面我会通过各部分逐步完成此项目\n1. 通过urllib库实现简单的对教务通知的抓取简析：通过urllib请求教务网页具体内容，再通过lxml中的html模块对内容中特定部分进行抓取\nimport urllib.request\nimport urllib\nimport urllib.parse\nfrom lxml import etree\nimport lxml.html\n\n#教务处站点\nbaseurl&#x3D;&quot;http:&#x2F;&#x2F;jwc.cqu.edu.cn&quot;\n\n#获取通知站点\ngeturl&#x3D;&quot;http:&#x2F;&#x2F;jwc.cqu.edu.cn&#x2F;index&#x2F;tzgg.htm&quot;\n\n#具体获取的对象\nnoticetitle&#x3D;[]\nnoticeurlst&#x3D;[]\n\n#请求头\nheaders&#x3D;&#123;&#39;User-Agent&#39;: &#39;Chrome&#x2F;63.0.3239.84 Safari&#x2F;537.36&#39;\n        &#39;Referer&#39; &#39;http:&#x2F;&#x2F;jwc.cqu.edu.cn&#39;\n        &#39;Connection&#39; &#39;keep-alive&#39;\n        &#125;\n\n#获取通知列表\ndef fetch_notice_urls():\n    req&#x3D;urllib.request.Request(url&#x3D;geturl,headers&#x3D;headers)\n    html&#x3D;lxml.html.parse(urllib.request.urlopen(req))\n    titles&#x3D;html.xpath(&#39;&#x2F;&#x2F;div[@class&#x3D;&quot;page-contner fl&quot;]&#x2F;ul&#x2F;li&#x2F;a&#x2F;text()&#39;)    #找到通知标题对应标签\n    orihrefs&#x3D;html.xpath(&#39;&#x2F;&#x2F;div[@class&#x3D;&quot;page-contner fl&quot;]&#x2F;ul&#x2F;li&#x2F;a&#x2F;@href&#39;)    #找到通知的具体链接对应标签\n    for urls in orihrefs:\n        noticeurlst.append(urls.replace(&quot;..&quot;, baseurl))    #将链接中的..替换为带有前缀的网址\n    with open(&#39;.&#x2F;fetch&#x2F;cqujwcres.txt&#39;,&quot;w+&quot;,encoding&#x3D;&#39;utf-8&#39;) as f:    #写入到本地\n        for i in range(len(titles)):\n            f.write(titles[i] + &quot;:\\t&quot; + noticeurlst[i] + &quot;\\n&quot;)\n\n#执行\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    fetch_notice_urls()\n\n通过以上代码，我们可以将教务信息第一页中的通知及其对应链接下载到本地，实现一个简单的抓取过程效果如下：\n2. 使用request库对教务网所有通知进行抓取This Part is UNDER CONSTRUCTION.\n","slug":"cquspider","date":"2023-03-10T14:27:00.000Z","categories_index":"Coding,Python","tags_index":"weekly","author_index":"Krodnel"},{"id":"3dac8a3b916e2b92a60024738a9872dc","title":"PYTHON第4章扩展习题","content":"Chapter4. 列表(EX)4.A 程序片段练习4.A.1 嵌套列表元素求和【问题描述】\n输入一个嵌套列表，嵌套层次不限，求列表元素的和。这个列表的每个元素是整数。\n【输入形式】\n嵌套列表【输出形式】\n整数【样例输入】\n[1,2,3,[4,5,6,7],8]\n【样例输出】\n36【代码实现】\nsum&#x3D;0\ndef sumlist(lst):\n    global sum\n    for x in lst:\n        if type(x)is int:\n            sum+&#x3D;x\n        else:\n            sumlist(x)\n    return sum\nnums  &#x3D;  eval(input())\nsumv  &#x3D;  sumlist(nums)\nprint(sumv)\n4.A.2 嵌套列表元素加权求和【问题描述】\n输入一个嵌套列表，嵌套层次不超过5层，根据层次，求列表元素的加权和，权是指元素在嵌套列表中的层次。第一层每个元素的权值为：元素值1，第二层每个元素的权值为：元素值2，第三层每个元素的权值为：元素值*3， …,依此类推！\n【输入形式】\n按照列表的形式输入，每个元素是一个整数【输出形式】\n整数【样例输入】\n[1,2,[3,4,[5,6],7],8]\n【样例输出】\n72【代码实现】\ndef sumlist(lst,b):\n    global sum\n    for x in lst:\n        if type(x)is int:\n            sum+&#x3D;x*b\n        else:\n            b+&#x3D;1\n            sumlist(x,b)\n            b-&#x3D;1\n    return sum\n\nsum&#x3D;0\nnums  &#x3D;  eval(input())\naddv  &#x3D;  sumlist(nums,  1)\nprint(addv)\n4.A.3 找出列表中缺失的数字【问题描述】\n 读入一个长度为n-1的整数列表，这个列表的所有元素都是按照递增顺序排列，且每个数字都是唯一的，每个数字都在范围0n-1之内。0n-1范围内的n个数字中有且只有一个数字不在该列表中。请找出这个数字。【输入形式】\n输入一个包含n-1个数字的列表，元素不重复且按升序排列，包括方括号，列表元素逗号分隔。【输出形式】\n输出找到的数字【样例输入1】\n[0,1,3]【样例输出1】\n2\n【样例输入2】\n[0,1,2,3,4,5]【样例输出2】\n6\n【样例说明】\n第1个样例输入的列表长度为3，也就是完整的列表应该是4个元素。0~3之间的每个数字只能出现一次，且必须出现一次。经查找缺了数字2。\n第2个样例输入的列表长度为6，也就是完整的列表应该是7个元素。0~6之间的每个数字只能出现一次，且必须出现一次。经查找缺了数字6。【代码实现】\ndef missNumber(lst):\n    fulllst&#x3D;[x for x in range(0,len(lst)+1)]\n    for x in fulllst:\n        if not x in lst:\n            return x\nnums  &#x3D;  eval(input())\nnumber  &#x3D;  missNumber(nums)\nprint(number)\n4.A.4 找出两个列表的相同元素（不使用集合），且去除重复元素【问题描述】\n已知两个列表，可能包含有相同元素，请找出两个列表的相同元素，并放入新的列表。打印新列表。输出结果中没有重复元素,如果两个列表中没有相同元素则输出[]。\n【输入形式】\n第一行输入第一个列表，包括方括号，元素之间用逗号分隔\n第二行输入第二个列表。【输出形式】\n如果存在相同元素，非降序输出列表元素\n如果不存在相同元素则输出[]\n【样例输入1】\n[1,2,3,4,5]\n[2,3,4,5,6]【样例输出1】\n[2, 3, 4, 5]\n【样例输入2】\n[1,2,3,4,5]\n[7,8,9,10,11]【样例输出1】\n[]【代码实现】\nnums1  &#x3D;  eval(input())    #  输入列表\nnums2  &#x3D;  eval(input())\nnums1.sort()    #  排序\nnums2.sort()\narr  &#x3D;  []\ni  &#x3D;  j  &#x3D;  0\nwhile  i  &lt;  len(nums1)  and  j  &lt;  len(nums2):    #  相互比较开始\n        if  nums1[i]  &lt;  nums2[j]:\n                i  +&#x3D;  1\n        elif  nums1[i]  &gt;  nums2[j]:\n                j+&#x3D;1\n        else:\n            arr.append(nums1[i])\n            i  +&#x3D;  1\n            j  +&#x3D;  1\nfor  x  in  arr:\n        while  arr.count(x)  &gt;  1:\n            arr.remove(x)\nprint(arr)\n\n\n4.B 编程练习4.B.1 计算嵌套列表某一层次的元素数量【问题描述】\n输入一个嵌套列表，再输入层数，求该层的元素个数。如果求第二层次的元素个数，但是第二层次还有第三层次嵌套，则嵌套列表算一个元素。\n【输入形式】\n第一行输入嵌套列表，包含方括号，逗号分隔，每个元素是整数\n第二行输入需要计算的层次，整数，大于0【输出形式】\n整数，计算所得的个数【样例输入】\n[1,2,[3,4,[5,6],7],8]\n2\n【样例输出】\n4\n【代码实现】\ndef countv(lst,a):\n    global floor,out\n    for x in lst:\n        if type(x)is int:\n            out[floor]+&#x3D;1\n        else:\n            out[floor]+&#x3D;1\n            floor+&#x3D;1\n            countv(x,floor)\n            floor-&#x3D;1\n    return out\nlst&#x3D;eval(input())\naspect&#x3D;eval(input())\nout&#x3D;[0 for x in range(0,len(lst))]\nfloor&#x3D;0\nprint(countv(lst,aspect)[aspect-1])\n\n4.B.2 计算嵌套列表中某一层列表的数字元素个数【问题描述】\n输入一个嵌套列表nums，再输入一个层数n，求该层的数字元素个数。【输入形式】\n第一行输入列表，元素是自然数，包括方括号，逗号分隔【输出形式】\n整数【样例输入】\n[1,2,[3,4,[5,6],7],8]\n3\n【样例输出】\n2\n【代码实现】\n\n\n\n\n\n\n\n\n\n此题在上题基础上仅需要当遍历的元素不是int类型时计数不再+1即可，故我们可以直接将else里的计数+1注释掉\ndef countv(lst,a):\n    global floor,out\n    for x in lst:\n        if type(x)is int:\n            out[floor]+&#x3D;1\n        else:\n            #out[floor]+&#x3D;1\n            floor+&#x3D;1\n            countv(x,floor)\n            floor-&#x3D;1\n    return out\nlst&#x3D;eval(input())\naspect&#x3D;eval(input())\nout&#x3D;[0 for x in range(0,len(lst))]\nfloor&#x3D;0\nprint(countv(lst,aspect)[aspect-1])\n\n4.B.3 返回任意两个元素的差小于等于limit的最长连续子列表\n\n\n\n\n\n提示\n本题代码虽能通过，但并不是最优解，没来得及进行进一步的优化例如：在列表out中，每一个满足条件的连续子列表长度都被append了进来，最优解应当最计算每个x对应的最长解\n\n【问题描述】\n读入一个自然数列表nums，和一个自然数limit。请返回最长连续子列表的长度。该子列表中任两个元素之间的差的绝对值小于或等于limit。【输入形式】\n第一行输入列表，包括方括号，逗号分隔\n第二行输入limit的值。【输出形式】\n整数【样例输入】\n[8,2,4,7]\n4\n【样例输出】\n2【代码实现】\ndef shortest(lst,limit):\n    global out\n    for x in range(0,len(lst)-1):\n        for i in range(x+1,len(lst)+1):\n            j&#x3D; lst[x:i+1]\n            if abs(max(j)-min(j))&lt;&#x3D;limit:\n                out.append(len(j))\n            else:\n                break\n    return max(out)\nlst&#x3D;eval(input())\nlimit&#x3D;eval(input())\nout&#x3D;[]\nprint(shortest(lst,limit))\n4.B.4 在列表中找出有相同度的最小连续子列表，输出其长度\n\n\n\n\n\n提示\n本题也并非最优解，out列表冗长，日后或许会优化\n\n【问题描述】\n给定一个只包含自然数的列表nums。列表的度指的是任一元素出现频率的最大值。找出与nums 拥有相同大小的度的最短连续子列表。输出这个子列表的长度。\n【输入形式】\n一个列表，包括方括号，逗号分隔【输出形式】\n整数【样例输入】\n[1, 2, 2, 3, 1]\n【样例输出】\n2【代码实现】\ndef shortest(lst,degree):\n    global out\n    if len(lst)&#x3D;&#x3D;1:\n        return 1\n    else:\n        for x in range(0,len(lst)-1):\n            for i in range(x,len(lst)+1):\n                j&#x3D; lst[x:i+1]\n                for k in j:\n                    if j.count(k)&#x3D;&#x3D;degree:\n                        out.append(len(j))\n                        break\n        return min(out)\nlst&#x3D;eval(input())\npinlv&#x3D;[]\nfor x in lst:\n    pinlv.append(lst.count(x))\ndegree&#x3D;max(pinlv)\nout&#x3D;[]\nprint(shortest(lst,degree))\n\n4.B.5 把由负整数构成的列表中的每个数转换成二进制补码形式【问题描述】\n已知一个列表，这个列表中的每个元素都是负整数，依次把这个列表中的每个数转成用32位二进制表示的补码形式，放入另外一个列表进行输出。【输入形式】\n用列表的形式进行输入，包括方括号，每个元素用逗号分隔【输出形式】\n直接用print输出列表【样例输入】\n[-1,-2,-3]\n【样例输出】\n[‘0b11111111111111111111111111111111’, ‘0b11111111111111111111111111111110’, ‘0b11111111111111111111111111111101’]【代码实现】\ndef fuerjinzhi(lst):\n    for x in lst:\n        out.append(bin(2**24+x))\n    for i in range(0,len(out)):\n        out_list&#x3D;list(out[i])\n        out_list.insert(2,&quot;11111111&quot;)\n        out[i]&#x3D;&quot;&quot;.join(out_list)\n    return out\nlst&#x3D;eval(input())\nout&#x3D;[]\nprint(fuerjinzhi(lst))","slug":"python-cp4-ex","date":"2022-03-14T15:48:02.000Z","categories_index":"Learning,Coding,Python","tags_index":"life,weekly","author_index":"Krodnel"},{"id":"8e7b2ceb716fa18b859880548cebfa73","title":"2022-April","content":"你是人间四月天！4.2 春の序-四月要更加努力啊-为了想要的生活-为了人间的烟火气-为了今天的风和月\n\n","slug":"2022-Apr","date":"2022-04-02T15:33:46.000Z","categories_index":"Thoughts","tags_index":"Life,Monthly","author_index":"Krodnel"},{"id":"7f9325ccf0a7deb8deedae86991cd4ba","title":"PYTHON第6章基础习题","content":"Chapter6. 循环6.A 程序片段练习6.A.1 列表元素循环右移一位【问题描述】\n以下列表里所有元素循环右移一位。请补充函数体。\n【输入形式】\n输入列表的元素，以逗号隔开【输出形式】\n循环右移一位后的列表\n【样例输入】\n1,2,3,4,5【样例输出】\n[‘5’, ‘1’, ‘2’, ‘3’, ‘4’]【代码实现】\ndef shift(lst):\n    global list1\n    lst.insert(0,lst.pop())\n    list1&#x3D;lst\n    return 0\n\nlist1 &#x3D; input().split(&quot;,&quot;) #输入格式 1,2,3,4,5\nshift(list1)\nprint(list1)\n6.A.2 本金与年利率【问题描述】李先生有本金N元（N&gt;&#x3D;10000）存入银行，年利率是千分之三，每过1年，将本金和利息相加作为新的本金。计算M年后，获得的本金是多少？\n【输入形式】输入一行，内容为以空格分隔的两个正整数N和M。\n【输出形式】输出李先生所获得的本金，结果保留小数点后四位。\n【样例输入】10000 5\n【样例输出】10150.9027【代码实现】\ndef main():\n    N,M &#x3D; map(int,input().split())\n    calculate_capital(N,M)\ndef calculate_capital(N,M):\n            i&#x3D;1\n            while(i&lt;&#x3D;M):\n                N&#x3D;N*1.003\n                i+&#x3D;1\n            print(&quot;%.4f&quot;%(N))\n            return 0\nmain()\n6.A.3 卖西瓜【问题描述】农夫有N（N大于0）个西瓜，第一天卖掉总数的一半后又多卖出两个，以后每天卖剩下的一半多两个，问几天以后能卖完？\n【输入形式】输入一个正整数N，表示农夫拥有的西瓜数。\n【输出形式】输出一个整数，表示农夫卖完全部瓜所需要的天数。\n【样例输入】10\n【样例输出】2\n【样例说明】农夫有10个瓜，第一天卖出（5+2）个，剩余3个；第二天卖出（1+2）个，剩余0个。注：农夫只卖整瓜！【代码实现】\ndef main():\n    total_count &#x3D; int(input())\n    calculate_days(total_count)\ndef calculate_days(a):\n            i&#x3D;0\n            while(a&gt;0):\n                a-&#x3D;a&#x2F;&#x2F;2+2\n                i+&#x3D;1\n            print(&quot;%d&quot;%(i))\n            return 0\nmain()\n6.A.4 多项求和【问题描述】求s&#x3D;a+aa+aaa+aaaa+aaaaa+aa…a的值，其中a是一个数字，表示s由几个数相加。例如当a&#x3D;3时，s等于三个数相加的和，即s&#x3D;3+33+333&#x3D;369。\n【输入形式】从键盘输入一个正整数a。\n【输出形式】输出此时s的值。\n【样例输入】3\n【样例输出】369【代码实现】\ndef main():\n    a&#x3D;int(input())\n    calculate_sum(a)\ndef calculate_sum(a):\n    floor&#x3D;1\n    sum&#x3D;0\n    i&#x3D;1\n    multiple&#x3D;a&#x2F;&#x2F;10+1\n    while(i&lt;&#x3D;a):\n        sum+&#x3D;a*floor\n        floor&#x3D;floor*(10**multiple)+1\n        i+&#x3D;1\n    print(&quot;%d&quot;%(sum))\n    return 0\nmain()\n6.A.5 计算e【问题描述】编写程序使用下列公式计算e。e&#x3D;1+1&#x2F;1!+1&#x2F;2!+1&#x2F;3!+…+1&#x2F;n!\n【输入形式】输入一个正整数n。\n【输出形式】输出对应的e的值，结果保留小数点后六位有效数字\n【样例输入】10\n【样例输出】2.718282【代码实现】\ndef main():\n    num &#x3D; eval(input())\n    calculate_e(num)\ndef calculate_e(num):\n    i&#x3D;1\n    sum&#x3D;1\n    while(i&lt;&#x3D;num):\n        jiecheng&#x3D;1\n        for x in range(1,i+1):\n            jiecheng*&#x3D;x\n        sum+&#x3D;1&#x2F;jiecheng\n        i+&#x3D;1\n    print(&quot;%.6f&quot;%(sum))\n    return 0\nmain()\n6.A.6 偶数和【问题描述】编程实现：从 0 开始到 n(n&gt;0，包括n) 以内的所有偶数之和【输入形式】输入一个正整数n【输出形式】结果以整数形式输出【样例输入】10【样例输出】30【代码实现】\nn&#x3D;eval(input())\nh1&#x3D;0\nfor x in range(1,n+1):\n      if x%2&#x3D;&#x3D;0:\n            h1+&#x3D;x\nprint(h1)\n6.A.7 整数的各位数字之和【问题描述】输入一个整数，求该整数的各位数之和【输入形式】【输出形式】【样例输入】123【样例输出】6【代码实现】\nn&#x3D;eval(input())\nsum1&#x3D;0\nwhile (n&gt;0):\n  sum1+&#x3D;n%10\n  n&#x3D;n&#x2F;&#x2F;10\nprint(sum1)\n6.A.8 是否包含数字5【问题描述】输入一个整数，求该整数上的各位数是否包含数字5，若有,则按从低到高的顺序输出第几位,若没有则输出-1\n【输入形式】【输出形式】每一行代表包含数字5的位数【样例输入】\n1223【样例输出】\n-1\n【样例输入】\n125【样例输出】\n1\n【样例输入】\n525【样例输出】\n1\n3【代码实现】\nn&#x3D;int(input())\nj&#x3D;1\nb&#x3D;-1\nflag&#x3D;False\nwhile n&gt;0:\n  if n%10&#x3D;&#x3D;5:\n    print(j)\n    flag&#x3D;True\n  n&#x3D;n&#x2F;&#x2F;10\n  j+&#x3D;1\nif flag&#x3D;&#x3D;False:\n  print(b)\n6.A.9 二月的天数【问题描述】\n二月通常有28天，但如果是闰年，二月就有29天。 请编写一个程序，根据用户输入的年份计算当年2月的天数并输出，其中，判断闰年请用自定义函数实现。 提示：能被400整除的是闰年，能被4整除但是不能被100整除的也是闰年\n【输入形式】\n整数（代表年份）\n【输出形式】\nIn 【年份】 February has [29 or 28] days.\n【样例输入】\n2021\n【样例输出】\nIn 2021 February has 28 days.【代码实现】\ndef leapyear(x):\n       if x%4&#x3D;&#x3D;0:\n           if x%100!&#x3D;0:\n               return True\n           elif x%100&#x3D;&#x3D;0:\n               return True\n           else:\n               return False\nyear&#x3D;int(input())\nif leapyear(year):\n    print(&quot;In %d February has 29 days.&quot;%year)\nelse:\n    print(&quot;In %d February has 28 days.&quot;%year)\n\n6.A.10 计算个人所得税和工资【问题描述】\n应纳个人所得税税额&#x3D; 应纳税所得额× 适用税率- 速算扣除数 \n扣除标准5000元&#x2F;月（2019年1月1日起正式执行）（工资、薪金所得适用） \n个税免征额5000元 　（工资薪金所得适用） \n级数全年应纳税所得额                         税率(%)速算扣除数 \n1不超过36,000元                  3        0 \n2超过36,000元至144,000元的部分       10     2,520 \n3超过144,000元至300,000元的部分      20    16,920 \n4超过300,000元至420,000元的部分      25    31,920 \n5超过420,000元至660,000元的部分      30    52,920 \n6超过660,000元至960,000元的部分      35    85,920 \n7超过960,000元的部分                45   181,920 \n输入一个人年薪，根据公式，计算出个人所得税，以及税后年薪\n【输入形式】\n年薪【输出形式】\n个人所得税\n税后年薪\n【样例输入】180000\n【样例输出】\n9480.00\n170520.00【代码实现】\nsalary &#x3D; float(input())\ntax &#x3D; 0.0\nsalary -&#x3D; 5000*12\nif salary &lt;&#x3D; 0:\n    tax &#x3D; 0.0\nelif salary &lt;&#x3D; 36000:\n    tax &#x3D; salary * 0.03\nelif salary &lt;&#x3D; 144000:\n    tax &#x3D; salary * 0.1 - 2520\nelif salary &lt;&#x3D; 300000:\n    tax &#x3D; salary * 0.2 - 16920\nelif salary &lt;&#x3D; 420000:\n    tax &#x3D; salary * 0.25 - 31920\nelif salary &lt;&#x3D; 660000:\n    tax &#x3D; salary * 0.3 - 52920\nelif salary &lt;&#x3D; 960000:\n    tax &#x3D; salary * 0.35 - 85920\nelse:\n    tax &#x3D; salary * 0.45 - 181920\nsalary&#x3D;salary+5000*12-tax\nprint(&quot;%.2f&quot;%tax)\nprint(&quot;%.2f&quot;%salary)\n\n\n6.B 完整编程练习6.B.1 加密数据【问题描述】加密数据。从键盘输入一段数字， 加密规则如下：对于每一个位置上的数字进行如下处理： 每位数字加上 5， 然后除以 10 得到的余数代替该数字， 再将第一位和最后一位交换，第二位与倒数第二位交换， 依此类推， 最后输出加密后的数字密码 。【输入形式】输入一行数字【输出形式】输出加密后的结果【样例输入】\n123【样例输出】\n876\n【样例输入】\n321【样例输出】\n678【代码实现】\nlst&#x3D;list(input())\nfor x in range(len(lst)):\n    lst[x]&#x3D;int(lst[x])\ni&#x3D;0\nwhile(i&lt;len(lst)):\n    lst[i]&#x3D;(lst[i]+5)%10\n    i+&#x3D;1\nj&#x3D;0\nwhile(j&lt;len(lst)&#x2F;&#x2F;2):\n    lst[j],lst[len(lst)-j-1]&#x3D;lst[len(lst)-j-1],lst[j]\n    j+&#x3D;1\nfor x in lst:\n    print(x,end&#x3D;&quot;&quot;)\n6.B.2 高度反弹【问题描述】一球从 h 米高度自由落下， 每次落地后反跳回原高度的 0.5倍； 再落下， 求它在第 N 次落地时， 共经过多少米？【输入形式】第一行输入高度，第二行输入N\n【输出形式】输出两位数的浮点数【样例输入】\n10\n6【样例输出】\n29.38【代码实现】\nh&#x3D;eval(input())\nN&#x3D;eval(input())\ni&#x3D;2\nsum&#x3D;h\nwhile(i&lt;&#x3D;N):\n    h*&#x3D;0.5\n    sum+&#x3D;2*h\n    i+&#x3D;1\nprint(&quot;%.2f&quot;%(sum))\n6.B.3 找学生【问题描述】折半查找。 1 个列表里存储了 20 个子列表， 各子列表内存储了学生的学号及姓名两个元素， 两个元素都是字符串类型。 现已知该 20 个学生子列表已按学号递增序排好序。请设计一个程序， 使用折半查找算法通过最少次数的比较找到指定学号的学生， 如果有， 输出这个学生的学号和姓名， 如果没有， 输出报告未找到该学生。 列表中存储数据为stu_list&#x3D;\n[[‘201801’,’zhangyi’],[‘201802’,’zhanger’],[‘201803’,’zhangsan’],[‘201804’,’zhangsi’],\n[‘201805’,’wangyi’],[‘201806’,’wanger’],[‘201807’,’wangsan’],[‘201808’,’wangsi’],\n[‘201809’,’liyi’],[‘201810’,’lier’],[‘201811’,’lisan’],[‘201812’,’lisi’],\n[‘201813’,’zhaoyi’],[‘201814’,’zhaoer’],[‘201815’,’zhaosan’],[‘201816’,’zhaosi’],\n[‘201817’,’zhouyi’],[‘201818’,’zhouer’],[‘201819’,’zhousan’],[‘201820’,’zhousi’]]\n【输入形式】输入要查找的学生学号【输出形式】输出学号和姓名【样例输入】201800【样例输出】None\n【样例输入】201803【样例输出】201803zhangsan【代码实现】\nstu_lst&#x3D;[[&#39;201801&#39;,&#39;zhangyi&#39;],[&#39;201802&#39;,&#39;zhanger&#39;],[&#39;201803&#39;,&#39;zhangsan&#39;],[&#39;201804&#39;,&#39;zhangsi&#39;],[&#39;201805&#39;,&#39;wangyi&#39;],[&#39;201806&#39;,&#39;wanger&#39;],[&#39;201807&#39;,&#39;wangsan&#39;],[&#39;201808&#39;,&#39;wangsi&#39;],[&#39;201809&#39;,&#39;liyi&#39;],[&#39;201810&#39;,&#39;lier&#39;],[&#39;201811&#39;,&#39;lisan&#39;],[&#39;201812&#39;,&#39;lisi&#39;],[&#39;201813&#39;,&#39;zhaoyi&#39;],[&#39;201814&#39;,&#39;zhaoer&#39;],[&#39;201815&#39;,&#39;zhaosan&#39;],[&#39;201816&#39;,&#39;zhaosi&#39;],[&#39;201817&#39;,&#39;zhouyi&#39;],[&#39;201818&#39;,&#39;zhouer&#39;],[&#39;201819&#39;,&#39;zhousan&#39;],[&#39;201820&#39;,&#39;zhousi&#39;]]\nnumber&#x3D;input()\nfor x in stu_lst:\n    if number in x:\n        for j in x:\n            print(j,end&#x3D;&quot;&quot;)\n        break\nelse:\n    print(&quot;None&quot;)\n6.B.4 数列求和【问题描述】有一个分数数列：2&#x2F;1,3&#x2F;2,5&#x2F;3,8&#x2F;5,13&#x2F;8,21&#x2F;13,…,从键盘输入一个正整数n，求出这个数列的前n项之和。\n【输入形式】输入一个正整数n。\n【输出形式】输出该数列的前n项之和，并保留四位小数。\n【样例输入】3\n【样例输出】5.1667【代码实现】\nn&#x3D;eval(input())\nup&#x3D;2\ndown&#x3D;1\nc&#x3D;0\nsum&#x3D;0\nfor x in range(n):\n    sum+&#x3D;(up&#x2F;down)\n    c&#x3D;up\n    up+&#x3D;down\n    down&#x3D;c\nprint(&quot;%.4f&quot;%(sum))\n6.B.5 累积求和【问题描述】从键盘不断地输入整数，当输入“#”时程序退出，然后打印出所输入整数的个数和总和。\n【输入形式】输入多行，每行从键盘输入一个数，直到输入#为止，则输入停止。\n【输出形式】输出一行，内容为以空格分隔的两个数，分别表示输入整数的个数n和这些整数的总和s。\n【样例输入】1\n2\n#\n【样例输出】2 3【代码实现】\na&#x3D;True\ncount&#x3D;0\nsum&#x3D;0\nwhile(a):\n    n&#x3D;input()\n    if n!&#x3D;&quot;#&quot;:\n        count+&#x3D;1\n        sum+&#x3D;int(n)\n    else:\n        print(count,sum)\n        break\n6.B.6 回文素数【问题描述】编写程序，从键盘输入一个数n，输出n以内的所有的回文素数。若n输入不合法（为小数或者负数），则输出提示：“illegal input”。\n回文素数是指一个数既是素数又是回文数。一个大于1的自然数，除了1和它自身外，不能被其他自然数整除的数称之为素数。例如131既是素数又是回文数。\n【输入形式】输入一个整数n（n&gt;1）。\n【输出形式】以空格分隔输出n以内的所有的回文素数。若n输入不合法（为小数或负数），则输出提示“illegal input”\n【样例输入1】200\n【样例输出1】2 3 5 7 11 101 131 151 181 191\n【样例输入2】-4\n【样例输出2】illegal input【代码实现】\nn&#x3D;eval(input())\nout&#x3D;[]\nif n%1!&#x3D;0 or n&lt;&#x3D;0:\n    print(&quot;illegal input&quot;)\nelse:\n    for x in range(2,n+1):\n        time&#x3D;0\n        for j in range(2,x+1):\n            if x%j&#x3D;&#x3D;0:\n                time+&#x3D;1\n        if time&#x3D;&#x3D;1:\n            l&#x3D;str(x)\n            i&#x3D;0\n            floor&#x3D;0\n            while(i&lt;len(l)&#x2F;&#x2F;2):\n                if l[i]&#x3D;&#x3D;l[-1-i]:\n                    floor+&#x3D;1\n                i+&#x3D;1\n            if floor&#x3D;&#x3D;(len(l)&#x2F;&#x2F;2):\n                out.append(x)\nfor x in out:\n    print(x,end&#x3D;&quot; &quot;)\n6.B.7 组合数字【问题描述】从键盘输入两个整数n和m（要求n&lt;m)，编程求出由n到m(不包含m)中的整数组合而成的所有不含重复数字的三位数。若n和m的输入不合法或者没有符合条件的三位数则提示输出“illegal input”。\n【输入形式】输入一行，内容为两个以空格分隔的整数，分别表示n和m。\n【输出形式】以空格分隔输出所有符合条件的三位数。\n【样例输入】1 4\n【样例输出】123 132 213 231 312 321\n【样例输入】2 4\n【样例输出】illegal input\n【样例输入】0 3\n【样例输出】102 120 201 210【代码实现】\na,b&#x3D;map(int,input().split(&quot; &quot;))\nout&#x3D;[]\nif b-a&lt;3:\n    print(&quot;illegal input&quot;)\nelse:\n    for x in range(a,b):\n        for y in range(a,b):\n            for z in range(a,b):\n                num&#x3D;x*100+y*10+z\n                if x!&#x3D;y and x!&#x3D;z and y!&#x3D;z and num&gt;100:\n                    out.append(num)\n    if len(out)&#x3D;&#x3D;0 or out[0]&gt;1000:\n        print(&quot;illegal input&quot;)\n    else:\n        for x in out:\n            print(x,end&#x3D;&quot; &quot;)\n6.B.8 颜色混合器【问题描述】\n红色(red)、蓝色(blue)和黄色(yellow)被称为原色(primary color)。 当两种原色混合时，将得到次生色(secondary color)。\n规则如下： \n当红色与蓝色混合时，将得到紫色(purple)。 \n当红色与黄色混合时，将得到橙色(orange)。 \n当蓝色与黄色混合时，将得到绿色(green)。 \n编写一个程序，根据用户输入的欲混合的两种原色，输出混合得到的次生色的名称。 如果用户输入的不是三原色的名称，或者输入的两个颜色相同，则输出“error”\n【输入形式】\n原色1\n原色2【输出形式】\n次生色 or error【样例输入1】\nred\nblue\n【样例输出1】\npurple\n【样例输入2】\nred\nred\n【样例输出2】\nerror【代码实现】\na&#x3D;input()\nb&#x3D;input()\ncolor&#x3D;[&quot;red&quot;,&quot;blue&quot;,&quot;yellow&quot;]\nrule&#x3D;[[&quot;red&quot;,&quot;yellow&quot;,&quot;orange&quot;],[&quot;red&quot;,&quot;blue&quot;,&quot;purple&quot;],[&quot;blue&quot;,&quot;yellow&quot;,&quot;green&quot;]]\nif a&#x3D;&#x3D;b or a not in color or b not in color:\n    print(&quot;error&quot;)\nelse:\n    for x in rule:\n        if a in x and b in x:\n            print(x[-1])\n6.B.9 轮盘赌的颜色【问题描述】\n在一个赌博用的转盘上，口袋的编号是从0到36，口袋的颜色如下： \n1.从1号袋到10号袋，奇数的口袋是红色，偶数的口袋是黑色。\n2.从11号袋到18号袋，奇数的口袋是黑色，偶数的口袋是红色。\n3.从19号袋到28号袋，奇数的口袋是红色，偶数的口袋是黑色。 \n4.从29号袋到36号袋，奇数的口袋是黑色，偶数的口袋是红色。\n5.0号口袋是绿色\n请编写一个程序，根据用户输入的口袋编号，输出口袋的颜色。 如果用户输入的数字不在0~36这个范围内，则输出“error”。\n【输入形式】整数\n【输出形式】\ngreen or red or black or error【样例输入1】\n0【样例输出1】\ngreen\n【样例输入2】\n11【样例输出2】\nblack【代码实现】\na&#x3D;eval(input())\nrule&#x3D;[&quot;black&quot;,&quot;red&quot;,&quot;green&quot;]\nif a&lt;0 or a&gt;36:\n    print(&quot;error&quot;)\nelse:\n    if a in range(1,11) or a in range(19,29):\n        if a%2&#x3D;&#x3D;0:\n            print(rule[0])\n        else:\n            print(rule[1])\n    elif a in range(11,19) or a in range(29,37):\n        if a%2&#x3D;&#x3D;0:\n            print(rule[1])\n        else:\n            print(rule[0])\n    else:\n        print(rule[2])\n6.B.10 月份对应的季节【问题描述】\n根据用户输入的月份，打印该月份所属的季节，如果输入的数据不在1~12范围内，输出“error” \n提示：3，4，5 spring ；6，7，8 summer ；9，10，11 autumn ；12，1，2 winter\n【输入形式】\n月份（整数）【输出形式】\nspring or summer or autumn or winter or error\n【样例输入】3\n【样例输出】spring【代码实现】\na&#x3D;eval(input())\nrule&#x3D;[[3,4,5,&quot;spring&quot;],[6,7,8,&quot;summer&quot;],[9,10,11,&quot;autumn&quot;],[12,1,2,&quot;winter&quot;]]\nif a not in range(1,13):\n    print(&quot;error&quot;)\nelse:\n    for x in rule:\n        if a in x:\n            print(x[-1])\n6.B.11 字符统计【问题描述】\n输入一行字符（不能输入中文字符），分别统计出该字符串英文字符、空格、数字和其他字符的个数\n【输入形式】\n字符串\n【输出形式】\n英文字符个数 空格个数 数字字符个数 其他字符个数\n【样例输入】\nabcd 1 2 3 4!@#$$%^\n【样例输出】\n4 4 4 7\n【样例说明】\n输出数字之间用空格隔开【代码实现】\na&#x3D;input()\neng&#x3D;0\nspace&#x3D;0\nnum&#x3D;0\nother&#x3D;0\nfor x in a:\n    if x.isalpha()&#x3D;&#x3D;True:\n        eng+&#x3D;1\n    elif x.isdigit()&#x3D;&#x3D;True:\n        num+&#x3D;1\n    elif x&#x3D;&#x3D;&quot; &quot;:\n        space+&#x3D;1\n    else:\n        other+&#x3D;1\nprint(eng,space,num,other)\n6.B.12 分段函数求值【问题描述】\n编写一个程序，用户输入一个值x，计算分段函数f(x)的值并输出结果，函数f(x)请用自定义函数实现。\n其中，\n\n【输入形式】\nx【输出形式】\n小数点后2位【样例输入】\n21.5【样例输出】\n2.12【样例说明】\nx的值可以是整数也可以是小数，甚至可以是负数【代码实现】\ndef cal(x):\n    if x&lt;20:\n        return 6*x**2+1\n    elif x&gt;&#x3D;20 and x&lt;40:\n        return (3*x-60)**0.5\n    elif x&gt;&#x3D;40:\n        return 100&#x2F;(x+1)\nn&#x3D;eval(input())\nprint(&quot;%.2f&quot;%(cal(n)))\n\n6.B.13 美元人民币转换【问题描述】\n以下是一段温度转换程序，可以实现华氏温度和摄氏温度的转换，请自行阅读程序，在理解程序的基础上，仿照此程序，写一个人民币和美元之间的货币转换程序。\n该程序实现以下功能：\n示例：输入212F      输出100.00C\n输入100c      输出212.00F\n输入不符合格式要求，输出“Error”     \nTempStr &#x3D; input()\n\nif TempStr[-1] in [&#39;F&#39;,&#39;f&#39;]:\n\n    C &#x3D; (eval(TempStr[0:-1]) - 32)&#x2F;1.8\n\n    print(&quot;%.2fC&quot;%(C))\n\nelif TempStr[-1] in [&#39;C&#39;,&#39;c&#39;]:\n\n    F &#x3D; 1.8*eval(TempStr[0:-1]) + 32\n\n    print(&quot;%.2fF&quot;%(F))\n\nelse:\n\n    print(&quot;Error&quot;)\n\n\n人民币和美元是世界上通用的两种货币之一，写一个程序进行货币间币值转换，其中：人民币和美元间汇率固定为：1美元 &#x3D; 6.78人民币。\n程序可以接受人民币或美元输入，转换为美元或人民币输出。人民币采用&amp;符号或RMB表示，美元采用$或USD表示，符号和数值之间没有空格。\n注意：人民币和美元间符号在转换中要对等，&amp;和$相互对应，RMB和USD相互对应。\n【输入形式】\n美元或人民币\n【输出形式】\n转换后的人民币或美元，保留两位小数\n输入不符合格式要求，输出“Error”\n【样例输入1】\n$128.00\n【样例输出1】\n&amp;867.84\n【样例输入2】\n&amp;12.9\n【样例输出2】\n$1.90\n【样例输入3】\nRMB123\n【样例输出3】\nUSD18.14\n【样例输入4】\nUSD18.14\n【样例输出4】\nRMB122.99【代码实现】\nbalance&#x3D;input()\nif balance[0]&#x3D;&#x3D;&quot;$&quot;:\n    c&#x3D;(eval(balance[1:len(balance)])*6.78)\n    print(&quot;&amp;%.2f&quot;%(c))\nelif balance[0]&#x3D;&#x3D;&quot;&amp;&quot;:\n    c&#x3D;(eval(balance[1:len(balance)])&#x2F;6.78)\n    print(&quot;$%.2f&quot;%(c))\nelif balance[0:3]&#x3D;&#x3D;&quot;USD&quot;:\n    c&#x3D;(eval(balance[3:len(balance)])*6.78)\n    print(&quot;RMB%.2f&quot;%(c))\nelif balance[0:3]&#x3D;&#x3D;&quot;RMB&quot;:\n    c&#x3D;(eval(balance[3:len(balance)])&#x2F;6.78)\n    print(&quot;USD%.2f&quot;%(c))\nelse:\n    print(&quot;Error&quot;)\n6.B.14 判断正方形【问题描述】\n输入一个方形的长度和宽度，编写程序判断该方形是否为正方形（长和宽都应大于0）【输入形式】\n长度\n宽度【输出形式】\n（1）如果长度等于宽度，输出：It’s a square\n（2）如果长度不等于宽度，输出：It’s a rectangle\n（3）如果长或宽有小于0的，输出：illegal data\n【样例输入1】\n10\n10【样例输出1】\nIt’s a square\n【样例输入2】\n-2\n10【样例输出2】\nillegal data【代码实现】\na&#x3D;eval(input())\nb&#x3D;eval(input())\nif a&lt;&#x3D;0 or b&lt;&#x3D;0:\n    print(&quot;illegal data&quot;)\nelif a&#x3D;&#x3D;b:\n    print(&quot;It&#39;s a square&quot;)\nelse:\n    print(&quot;It&#39;s a rectangle&quot;)\n6.B.15 评奖系统【问题描述】\n编程实现学校评奖系统，（1）如果数学成绩大于等于99并且语文成绩大于等于99，获奖学金500。\n（2）如果数学和语文成绩都小于30，输出重修。【输入形式】\n语文成绩\n数学成绩【输出形式】\n（1）如果数学和语文成绩都大于等于99，输出:You won a scholarship of 500 yuan!\n（2）如果数学和语文成绩都小于30，输出:You need to relearn!\n【样例输入】\n100\n99【样例输出】\nYou won a scholarship of 500 yuan!【代码实现】\na&#x3D;eval(input())\nb&#x3D;eval(input())\nif a&gt;&#x3D;99 and b&gt;&#x3D;99:\n    print(&quot;You won a scholarship of 500 yuan!&quot;)\nelif a&lt;30 and b&lt;30:\n    print(&quot;You need to relearn!&quot;)\n6.B.16 统计字符串列表中每个字母出现的次数【问题描述】\n统计字符串列表中每个字母出现的次数。编写程序，使用eval()函数读入一个仅包含字符串对象的列表，然后统计该列表中每个字母出现的次数。 列表中的字符串对象仅包含小写英文字母。\n【输入形式】\n一个仅包括字符串对象的列表，且全部字符串对象中仅出现小写英文字母。\n【输出形式】\n字母,次数…字母,次数(注意按a-z的顺序输出)\n【样例输入】\n[“aaab”, “cccdz”]\n【样例输出】\na,3b,1c,3d,1z,1【代码实现】\nlst&#x3D;eval(input())\nalpha&#x3D;[]\ntimes&#x3D;[]\nfor x in lst:\n    for y in x:\n        if y not in alpha:\n            alpha.append(y)\n            times.append(0)\nalpha&#x3D;sorted(alpha)\nfor x in lst:\n    for y in x:\n        if y in alpha:\n            times[alpha.index(y)]+&#x3D;1\nfor x in range(len(alpha)):\n    print(alpha[x],&quot;,&quot;,times[x],sep&#x3D;&quot;&quot;)\n6.B.17 python水仙花数【问题描述】输入一个整数，输出小于等于该整数的所有水仙花数，每行输出一个，若没有水仙花数则输出“none”\n“3位水仙花数”是指一个三位整数，其各位数字的3次方和等于该数本身。例如：ABC是一个“3位水仙花数”，则：A的3次方＋B的3次方＋C的3次方 &#x3D; ABC。 \n【输入形式】整数【输出形式】 整数或”none”【样例输入】100【样例输出】none【代码实现】\na&#x3D;eval(input())\ntime&#x3D;0\nif a &lt;100:\n    print(&quot;none&quot;)\nelse:\n    for x in range(100,a+1):\n        if x&#x3D;&#x3D;1000:\n            break\n        bai&#x3D;x&#x2F;&#x2F;100\n        shi&#x3D;(x-100*bai)&#x2F;&#x2F;10\n        ge&#x3D;(x-100*bai-10*shi)&#x2F;&#x2F;1\n        if bai**3+shi**3+ge**3&#x3D;&#x3D;x:\n            print(x)\n            time&#x3D;1\n    if time&#x3D;&#x3D;0:\n        print(&quot;none&quot;)\n6.B.18 成绩转换【问题描述】\n本题要求编写程序输入一个百分制成绩并把其转换为五分制成绩输出。\n转换规则为：\n大于等于90分为A； 小于90且大于等于80为B； 小于80且大于等于70为C； 小于70且大于等于60为D； 小于60为E。\n【输入形式】输入只有一个百分制成绩，如98.5【输出形式】输出对应的五分制成绩，如A【样例输入1】67【样例输出1】D【样例输入2】94.5【样例输出2】A【代码实现】\nscore&#x3D;eval(input())\nif score&gt;&#x3D;90:\n    print(&quot;A&quot;)\nelif score&gt;&#x3D;80:\n    print(&quot;B&quot;)\nelif score&gt;&#x3D;70:\n    print(&quot;C&quot;)\nelif score&gt;&#x3D;60:\n    print(&quot;D&quot;)\nelse:\n    print(&quot;E&quot;)","slug":"python-cp6-std","date":"2022-04-02T14:30:17.000Z","categories_index":"Learning,Coding,Python","tags_index":"life,weekly","author_index":"Krodnel"},{"id":"da3d3c8426ca2b127d2146bea8ac8e9f","title":"PYTHON第4章基础习题","content":"Chapter4.列表4.1 删除列表中的最大元素和最小元素【问题描述】\n读入一个整数列表，输出删除最大元素和最小元素后的列表。最大元素和最小元素可能有多个。【输入形式】\n输入列表，包括方括号【输出形式】\n直接用print输出列表【样例输入】\n[1,2,3,4,5,6,1,7,7]【样例输出】\n[2, 3, 4, 5, 6]【代码实现】\na&#x3D;eval(input())\nmax&#x3D;max(a)\nmin&#x3D;min(a)\na&#x3D;[i for i in a if i!&#x3D;max and i!&#x3D;min]\nprint(a)\n\n4.2 把姓名和成绩列表合并后按照成绩升序排列【问题描述】\n已知一个列表存放学生姓名，另外一个列表存放学生成绩。把姓名和成绩配对后，形成一个嵌套列表，按照成绩升序输出列表。【输入形式】\n第一行输入姓名，每个姓名用逗号分隔。第二行输入成绩，按照逗号分隔。【输出形式】\n直接用print输出列表【样例输入】\ntom,james,jack\n89,34,78【样例输出】\n[[‘james’, 34], [‘jack’, 78], [‘tom’, 89]]【代码实现】\nfrom operator import itemgetter\nnames&#x3D;input().split(&quot;,&quot;)\ngrades&#x3D;eval(input())\nlst&#x3D;[[],[],[]]\nx&#x3D;0\nfor i in names:\n    lst[x].append(i)\n    x+&#x3D;1\nx&#x3D;0\nfor i in grades:\n    lst[x].append(i)\n    x+&#x3D;1\nlst&#x3D;sorted(lst,key&#x3D;itemgetter(1))\nprint(lst)\n\n\n4.3 把分布在两个列表中的姓名和成绩配对后形成一个列表【问题描述】\n已知一个列表中存放的是一些学生的姓名，另外一个列表存放的是学生对应的考试成绩。两个列表长度相同。要求，把姓名和对应的成绩进行组合，形成一个列表。该列表包含一个嵌套列表，每个子列都是姓名和对应的成绩。最后输出形成的新列表。【输入形式】\n分两行输入，第一行输入姓名，按照字符串的方式输入，多个姓名之间用逗号分隔。第二行输入成绩，包含方括号，元素之间用英文逗号分隔。【输出形式】\n直接用print输出新的列表。【样例输入】\ntom,jack,jone,mike\n[88,89,34,90]【样例输出】\n[[‘tom’, 88], [‘jack’, 89], [‘jone’, 34], [‘mike’, 90]]【代码实现】\nnames&#x3D;input().split(&quot;,&quot;)\ngrades&#x3D;eval(input())\nlst&#x3D;[[],[],[]]\nx&#x3D;0\nfor i in names:\n    lst[x].append(i)\n    x+&#x3D;1\nx&#x3D;0\nfor i in grades:\n    lst[x].append(i)\n    x+&#x3D;1\nprint(lst)\n\n\n4.4 生成指定长度的等差数列【问题描述】\n输入三个正整数n，m，l，生成指定长度的等差数列，存入列表中。其中n表示起始值，m表示列表元素的数量，l表示公差。【输入形式】\n在同一行输入n，m，l三个值，中间用英文逗号分隔。【输出形式】\n打印输出列表【样例输入】\n2,3,2【样例输出】\n[2, 4, 6]\n【样例说明】\n第一个数字表示数列的起始值，第二个数字表示数据的个数，第三个数字表示差。【代码实现】\nn,m,l&#x3D;input().split(&quot;,&quot;)\nn&#x3D;int(n)\nm&#x3D;int(m)\nl&#x3D;int(l)\nlst&#x3D;[x for x in range(n,n+m*l,l)]\nprint(lst)\n\n\n4.5 删除列表中指定位置的元素【问题描述】\n读入一个列表lst和正整数n和m，然后删除n~m之间的元素，不包括m位置的元素，其中n小于或者等于m。如果输入的n和m不在列表lst的下标范围内，则输出”error”。【输入形式】\n第一行输入列表。包含方括号，列表元素用逗号分隔。\n第二行输入两个整数n和m，中间用一个逗号分割。【输出形式】\n直接用print输出列表【样例输入1】\n[1,2,3,4,5,6,7]\n2,3【样例输出1】\n[1,2,4,5,6,7]\n【样例输入2】\n[1,2,3,4,5,6]\n7,3【样例输出2】\nerror\n【样例说明】\n样例1：输入列表[1,2,3,4,5,6,7]和正整数2,3，则删除列表第2位置元素，打印输出[1,2,4,5,6,7]\n样例2：输入列表[1,2,3,4,5,6]和正整数7,3，7不在列表下标的范围之内，输出“error”【代码实现】\nlst&#x3D;eval(input())\nn,m&#x3D;input().split(&quot;,&quot;)\nn&#x3D;int(n)\nm&#x3D;int(m)\nif n &gt;&#x3D; len(lst) or m &gt;&#x3D;len(lst):\n    print(&quot;error&quot;)\nelse: \n    del lst[n:m]\n    print(lst)\n\n\n4.6 找出自然数列表中的素数，并放入另外一个列表，然后输出找出的素数【问题描述】\n读入一个自然数构成的列表，找出其中的每一个素数，然后放入另外一个列表，并输出这个列表。【输入形式】\n按照列表的形式输入，包括方括号，元素之间用逗号分隔。【输出形式】\n直接用print输出列表【样例输入】\n[2,3,5,7,9,11,23]\n【样例输出】\n[2, 3, 5, 7, 11, 23]【代码实现】\nlst&#x3D;eval(input())\nout&#x3D;[]\nfor x in lst:\n    if x&gt;1:\n        for i in range(2,x):\n            if x%i&#x3D;&#x3D;0:\n                break\n        else:\n            out.append(x)\nprint(out)\n\n\n4.7 计算整数列表平均值(根据结果判断是否输出小数部分）【问题描述】\n输入一个整数列表，计算所有元素的平均值，如果结果中小数为0，请只输出整数部分，如果结果中的小数部分不为0，则输出结果保留两位小数。【输入形式】\n从键盘输入列表，包含方括号，列表元素用逗号分隔。\n【输出形式】\n纯整数，或者带两位小数的浮点数【样例输入1】\n[1,2,3,4,5]【样例输出1】\n3\n【样例输入2】\n[2,2,3,7,5,1]【样例输出2】\n3.33【代码实现】\nlst&#x3D;eval(input())\nsum&#x3D;0\nfor x in lst:\n    sum&#x3D;sum+x\nout&#x3D;sum&#x2F;len(lst)\nif out%1&#x3D;&#x3D;0:\n    print(&quot;%d&quot;%(out))\nelse:\n    print(&quot;%.2f&quot;%(out))\n\n\n4.8 计算整数列表的平均值【问题描述】\n输入一个整数列表，计算所有元素的平均值。结果保留两位小数。输入数据用逗号分隔【输入形式】\n从键盘输入一个整数列表，包括方括号，元素逗号分隔【输出形式】\n输出所有元素的平均值，结果保留两位小数\n【样例输入】\n[1,2,3,4,5]\n【样例输出】\n3.00【代码实现】\nlst&#x3D;eval(input())\nsum&#x3D;0\nfor x in lst:\n    sum&#x3D;sum+x\nprint(&quot;%.2f&quot;%(sum&#x2F;len(lst)))\n\n\n4.9 交换列表中两个元素的值，并输出列表【问题描述】\n输入一个由字符串构成的列表和两个整数n和m（n和m在输入列表的下标范围以内），交换其中两个元素的值，打印输出交换后的列表。【输入形式】\n第一行输入由空格分隔的多个字符串\n第二行输入两个整数n和m，表示元素的位置，两个数字之间用空格区分。【输出形式】\n直接使用print函数输出列表【样例输入1】\nhello world python is great\n2 3【样例输出1】\n[‘hello’, ‘world’, ‘is’, ‘python’, ‘great’]\n【样例输入2】\nhello world python is great\n-2 3【样例输出2】\n[‘hello’, ‘world’, ‘python’, ‘is’, ‘great’]【代码实现】\nlst&#x3D;input().split(&#39; &#39;)\nn,m&#x3D;input().split(&#39; &#39;)\nn&#x3D;int(n)\nm&#x3D;int(m)\nl&#x3D;&#39;1&#39;\nl&#x3D;lst[n]\nlst[n]&#x3D;lst[m]\nlst[m]&#x3D;l\nprint(lst)\n\n\n4.10 删除列表中的重复值【问题描述】\n输入一个列表，删除其中的重复值，再输出。\n要求：假设列表中存在k个值为a的元素，删除前k-1个元素，保留最后一个。 不同元素在列表中的相对位置不应被改变。\n【输入形式】\n[元素1， 元素2, … , 元素n]\n【输出形式】\n[元素1，元素2, … , 元素k]\n【样例输入】\n[4,3,2,3,2,4,True]【样例输出】\n[3, 2, 4, True]【代码实现】\nlst&#x3D;eval(input())\nout&#x3D;[]\nfor x in range(0,len(lst)):\n    if (lst[x] in lst[x+1:])!&#x3D;True:\n        out.append(lst[x])\nprint(out)\n\n\n4.11 列表生成及循环左移【问题描述】\n从键盘读入一个整数n, 并完成下述任务：\n1·使用快速列表生成语法生成列表 [1, 2, … ,n-1, n];\n2·使用for循环将列表循环左移一个位置；\n3·输出循环左移后的列表。\n【输入形式】\nn\n【输出形式】\n[2, 3, … , n, 1]\n【样例输入】\n5【样例输出】\n[2, 3, 4, 5, 1]【代码实现】\nn&#x3D;eval(input())\nlst&#x3D;[x for x in range(1,n+1)]\nlst.append(lst[0])\nfor x in range(0,len(lst)-1):\n    lst[x]&#x3D;lst[x+1]\nlst.pop()\nprint(lst)\n\n\n4.12 把列表里面的个位正整数组合成一个最大的整数【问题描述】\n读入一个正整数列表，每个正整数都只有一位。把这些列表里面的数字，按位数组织成一个最大的整数，每个数字占据一位，不能重复使用。然后输出这个数字。例如列表[1,2,3,4] 可以组成1234, 或者4321等多个整数。输出最大整数。【输入形式】\n一个包含一位自然数的列表【输出形式】\n整数【样例输入】\n[0,1,2,3,2]【样例输出】\n32210【代码实现】\nlst&#x3D;eval(input())\nlst&#x3D;sorted(lst,reverse&#x3D;True)\nif lst.count(0)&#x3D;&#x3D;len(lst):\n    print(&quot;0&quot;)\nelse:    \n    for x in lst:\n        print(x,end&#x3D;&#39;&#39;)\n\n\n\n4.13 在列表中找出只出现一次的元素，并排序输出【问题描述】\n输入一个自然数列表，找出只出现一次的元素，并升序输出。如果没有只出现一次的元素，则输出False。【输入形式】\n输入包含自然数的列表，包括方括号，逗号分隔【输出形式】\n排序后的数字，每个数字之间用英文逗号分隔。或者False。【样例输入1】\n[1,2,3,5,2,3,4]【样例输出1】\n1,4,5\n【样例输入2】\n[9,9,9,12,12]【样例输出2】\nFalse【代码实现】\nlst&#x3D;eval(input())\nout&#x3D;[]\nfor x in lst:\n    time&#x3D;0\n    for i in lst:\n        if x&#x3D;&#x3D;i:\n            time+&#x3D;1\n    if time&#x3D;&#x3D;1:\n        out.append(x)\nout&#x3D;sorted(out)\nif len(out)&#x3D;&#x3D;0:\n    print(&quot;False&quot;)\nelse:\n    for x in out:\n        if out.index(x)!&#x3D;len(out)-1:\n            print(x,end&#x3D;&#39;,&#39;)\n        else:\n            print(x)\n\n\n4.14  把列表中数值为0的元素移动到列表的尾端，其他元素相对顺序不变【问题描述】\n读入一个整数列表，把数值为0的元素移动到列表尾部，其他元素的相对顺序不变。输出调整后的列表。【输入形式】\n按照列表的形式输入，包括方块号，逗号分隔。【输出形式】\n直接使用print打印【样例输入】\n[1,0,2,0,3,0,4]\n【样例输出】\n[1, 2, 3, 4, 0, 0, 0]【代码实现】\nlst&#x3D;eval(input())\nfor x in lst:\n    if x&#x3D;&#x3D;0:\n        lst.remove(x)\n        lst.append(0)\nprint(lst)\n\n\n4.15 从一个列表中取出第n个元素，并重复m次，放到末尾，然后输出列表【问题描述】\n输入一个整数列表和整数n(n可以是负数）和正整数m，从该列表中选择第n个元素，把该元素重复m次，然后放到列表的尾端，最后输出列表。如果输入的n值不在列表下标范围之内，则输出”error”【输入形式】\n输入时，第一行输入列表的元素，用英文逗号分隔。\n第二行输入两个数字n和m，用英文逗号分隔。\n【输出形式】\n直接使用print输出列表【样例输入1】\n1,2,3,4,5\n2,3【样例输出1】\n[1, 2, 3, 4, 5, 3, 3, 3]\n【样例输入2】\n1,2,3,4,5\n5,3【样例输出2】\nerror【代码实现】\nlst&#x3D;eval(input())\nlst&#x3D;list(lst)\nn,m&#x3D;eval(input())\nif n&gt;&#x3D;len(lst):\n    print(&quot;error&quot;)\nelse:\n    a&#x3D;lst[n]\n    for x in range(0,m):\n        lst.append(a)\n    print(lst)\n\n\n","slug":"python-cp4","date":"2022-03-12T03:48:27.000Z","categories_index":"Learning,Coding,Python","tags_index":"life,weekly","author_index":"Krodnel"},{"id":"331968bd518d7ee93cc059cb0862a51c","title":"2022-March","content":"三月已至！3.6 阳光明媚の三月\n不知不觉间就已经三月了，天气转暖，太阳出现的次数也越来越多了，阳光明媚，正是向上生长的季节！\n\n\n3.14 三月祝词\n带着二月的遗憾\n在三月里奋力奔跑\n我想\n即使道路泥泞\n也定会收获遍野的烂漫\n\n\n3.15 哈哈~~~我是夏小姐的狗~~~-我忘不掉夏小姐了。-如果不是知道了夏小姐，说不定我已经对这个世界没有留恋了。-夏小姐真的好可爱啊。做料理的时候笨拙的样子很可爱，故意撒娇养gachi也很可爱，唱歌的时候很可爱，生气拍桌子的时候也很可爱。-所以我离不开夏小姐了。如果早晨不是有夏小姐的起床闹钟的话，说不定我永远都不愿意睁眼了。如果晚上不是有夏小姐的直播预定的话，这一天我都不希望过完了。-夏小姐的眼睛好灵动，如果能映照出我就好了。夏小姐的笑容好温柔，如果只为我一个人绽放就好了。夏小姐的头发好柔顺，如果能让我尽情抚摸就好了。-夏小姐这样的存在真的是被允许的吗。-只是像现在这样默念夏小姐的名字，我就觉得自己是世界上最最最最最最最最最最最最最最最最最最最最最最最最最最最最最最最最最最最幸福的单推人(bushi)。\n\n3.16 天气与网课\n白天好热啊好热啊好热啊\n傍晚和晚上好凉快好凉快好凉快\nでも\n最近疫情又有点爆发了\n学校也封了，大家都在上网课\n梦回2020啊！\n大家也要多保重自己！注意防护喔\n\n","slug":"2022-3月序","date":"2022-03-01T14:58:23.000Z","categories_index":"Thoughts","tags_index":"Life,Monthly","author_index":"Krodnel"},{"id":"e70d99003a84ba65658bdad8766ddd8c","title":"2022-Januarary","content":"1.1 庆元旦\n二零二二\n新的一年\n万事顺意！\n\n\n1.31 大年三十·除夕\n又是一年除夕岁时\n祝愿新的一年\n一切都会好起来！\n\n","slug":"2022-Januarary","date":"2022-01-01T00:22:44.000Z","categories_index":"Thoughts","tags_index":"Life,Monthly","author_index":"Krodnel"},{"id":"5c50df8da53538a708e48e649285f57a","title":"2021-December","content":"12.1 腊月祝词·序\n梦中的十二月\n雪落长街\n但雪于重庆似乎是奇迹般的存在\n二零二一年的最后一个月\n我不单希望那雪落下\n也希望自己能像那奇迹般\n于大地上振作起来\n给大学的第一学期生活画上完满句号\n岁末\n我们努力\n我们歌唱\n我们祝福\n我们，\n敬颂冬綏。\n\n\n12.2 观卷王有感\n为何他人能做到专注于作业之上\n而自己却只顾着玩\n真该醒醒了\n游戏、娱乐与学业之重要性\n整理思绪\n重装出发\n\n","slug":"2021-December","date":"2021-12-01T12:26:16.000Z","categories_index":"Thoughts","tags_index":"Life,Monthly","author_index":"Krodnel"},{"id":"92e254c391cd8ec69557e8e605f447b4","title":"2021-September","content":"\n\n\n\n\n\n\n特别注意\n此文章具有人身攻击属性\n\n\n点击查看全文\n9.28 闻丁意楷抽烟遥有此寄\n草你妈\n能不能别抽烟\n我爸在家里都躲着我抽\n你他妈在寝室里随便抽？\n我凭什么受这个气\n想折寿也别拉上我们\n自私自利的家伙\n我他妈越想越气\n你是什么寄吧\n我要让着你抽\n自己说的到阳台上抽\n忘干净了吗\n你妈的骨灰应该是早就消散了吧\n这几天暗示的还少了吗\n懂不起是吧\n硬要抽是吧\n脸色都给完了\n能不能滚啊\n我为什么要被你染上烟味啊\n一个人坏了全宿舍\n合着三个人都没勇气说吧\n老子要让你知道什么叫\n复兴民族\n誓作前锋\n\n\n\n","slug":"2021-September","date":"2021-09-26T15:26:05.000Z","categories_index":"Thoughts","tags_index":"Life,Monthly","author_index":"Krodnel"},{"id":"3dc297844e2caf37aa3a2dcdeed0355b","title":"2021-June","content":"6.5 倒计时两天\n两日后\n高考将至\n希望自己\n稳住心态\n超常发挥\n考上六百二十\n\n\n6.6 高考前夕\n离高考\n只一天\n加油呀\n\n","slug":"2021-June","date":"2021-06-04T15:25:56.000Z","categories_index":"Thoughts","tags_index":"Life,Monthly","author_index":"Krodnel"},{"id":"9cc69e8b048e5cdbf150b05780c5f373","title":"2021-Januarary","content":"1.1 致新年·下\n站在二零二一年的这一头\n回望往昔情谊\n过去的一年里收获良多\n朝着自己既定的目标前进吧\n学习也好 身体也好\n少熬夜！少玩游戏！\n衣帽裤鞋适量添置\n冲！\n今年是辛丑牛年\n那就祝自己\n牛转乾坤！\n\n\n1.12 网抑\n感觉最近学废了\n啊啊啊\n不行\n我要相信自己！\n\n\n1.22 祝一诊\n一诊加油！\n明天就是一诊了\n今天好好复习\n临时抱抱佛脚\n考个好成绩（前两百）\n加油！\n\n","slug":"2021-Januarary","date":"2021-01-01T05:25:46.000Z","categories_index":"Thoughts","tags_index":"Life,Monthly","author_index":"Krodnel"},{"id":"a0fc5943b7a790623fb58b6f27504305","title":"2020-December","content":"12.21 数学难题\n立体几何 实在不会\n一看就会 一做就没\n啊\n我是多么的废\n\n\n12.22 关于理想\n想做的事还有很多\n但限制我的却是金钱\n以及时间\n追求高层次的精神与现实贫乏的物质\n这样的矛盾何时才能消失不见？\n\n\n12.29 怀旧有感\n怀念从前\n属于我的 旧时光\n怀念\n故事故物\n故城故景\n故人故情\n\n\n12.30 怀旧之破局\n既欲忆往昔\n何不梦未来\n悟已往之不谏\n知来者之可追\n\n\n12.31 致新年·上\n站在二零二零的这一头\n眺望远方之蓝\n新的一年\n祝愿你能取得好成绩\n画上完美的句号\n不在烦心 走出迷茫\n\n","slug":"2020-December","date":"2020-12-20T15:25:26.000Z","categories_index":"Thoughts","tags_index":"Life,Monthly","author_index":"Krodnel"}]